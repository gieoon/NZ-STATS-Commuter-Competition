{"version":3,"sources":["components/mapVisualizer.jsx"],"names":["getTotalStatistic","data","statistic","normalizer","getStatistic","colorInterpolator","confirmed","t","interpolateReds","active","interpolateBlues","recovered","interpolateGreens","deceased","interpolateGreys","tested","interpolatePurples","MapVisualizer","currentMap","changeMap","setRegionHighlighted","regionHighlighted","isCountryLoaded","useTranslation","svgRef","useRef","mapMeta","MAP_META","code","geoData","useSWR","geoDataFile","file","a","async","json","revalidateOnFocus","suspense","statisticMax","useMemo","stateCodes","Object","keys","filter","districtCode","includes","view","MAP_TYPES","COUNTRY","max","option","MAP_OPTIONS","PER_MILLION","DISTRICT_POPULATIONS_MIL","districts","values","districtData","statisticTotal","mapScale","ZONES","scaleOrdinal","ZONE_COLORS","HOTSPOTS","scaleSqrt","Math","clamp","nice","scaleSequential","useEffect","console","log","topology","topojson","objects","graphObjectStates","graphObjectDistricts","svg","select","current","projection","geoMercator","fitSize","path","geoPath","features","DISTRICT","mapType","map","f","district","properties","state","st_nm","obj","assign","id","fillColor","d","n","stateCode","DISTRICT_CODES","stateData","zone","strokeColor","COLORS","transition","duration","D3_TRANSITION_DURATION","onceTouchedRegion","selectAll","join","enter","sel","append","attr","style","on","districtName","update","call","event","stopPropagation","STATE","text","TOTAL","formatNumber","capitalizeAll","Fragment","className","viewBox","preserveAspectRatio","ref","DISTRICTS","UNKNOWN_DISTRICT_KEY","position","height","colorInterpolationFilters","type"],"mappings":"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","file":"static/js/MapVisualizer.e7979a63.chunk.js","sourcesContent":["import React, {useEffect, useMemo, useRef} from 'react';\nimport useSWR from 'swr';\nimport {json} from 'd3-fetch';\nimport {scaleOrdinal, scaleSqrt, scaleSequential} from 'd3-scale';\nimport {\n    interpolateReds,\n    interpolateBlues,\n    interpolateGreens,\n    interpolateGreys,\n    interpolatePurples,\n} from 'd3-scale-chromatic';\nimport {max} from 'd3-array';\nimport {select, event} from 'd3-selection';\nimport {geoMercator, geoPath} from 'd3-geo';\nimport {transition} from 'd3-transition';\nimport {useTranslation} from 'react-i18next';\nimport * as topojson from 'topojson';\nimport * as Icon from 'react-feather';\nimport {\n    MAP_META,\n    D3_TRANSITION_DURATION,\n    MAP_TYPES,\n    MAP_OPTIONS,\n    ZONE_COLORS,\n    DISTRICT_POPULATIONS_MIL,\n    DISTRICT_CODES,\n    COLORS,\n    UNKNOWN_DISTRICT_KEY,\n} from '../constants';\nimport {\n    capitalizeAll,\n    formatNumber,\n    getStatistic,\n} from '../utils/commonFunctions';\n\nconst [width, height] = [432, 488];\n\nconst getTotalStatistic = (data, statistic, normalizer = 1) => {\n    return getStatistic(data, 'total', statistic, normalizer);\n};\n\nconst colorInterpolator = {\n    confirmed: (t) => interpolateReds(t * 0.85),\n    active: (t) => interpolateBlues(t * 0.85),\n    recovered: (t) => interpolateGreens(t * 0.85),\n    deceased: (t) => interpolateGreys(t * 0.85),\n    tested: (t) => interpolatePurples(t * 0.85),\n};\n\nfunction MapVisualizer({\n    currentMap,\n    data,\n    changeMap,\n    regionHighlighted,\n    setRegionHighlighted,\n    statistic,\n    isCountryLoaded,\n}){\n    const {t} = useTranslation();\n    const svgRef = useRef(null);\n\n    const mapMeta = MAP_META[currentMap.code];\n\n    const {data: geoData} = useSWR(\n        mapMeta.geoDataFile,\n        async (file) => {\n            // const f = await json(file);\n            // console.log(f);\n            return await json(file);\n        },\n        {revalidateOnFocus: false, suspense: true}\n    );\n\n    const statisticMax = useMemo(() => {\n        const stateCodes = Object.keys(data).filter(\n          (districtCode) =>\n          districtCode !== 'NZ' && Object.keys(MAP_META).includes(districtCode)\n        );\n        return currentMap.view === MAP_TYPES.COUNTRY\n          ? max(stateCodes, (districtCode) =>\n              getTotalStatistic(\n                data[districtCode],\n                statistic,\n                currentMap.option === MAP_OPTIONS.PER_MILLION\n                  ? DISTRICT_POPULATIONS_MIL[districtCode]\n                  : 1\n              )\n            )\n          : max(stateCodes, (districtCode) =>\n              data[districtCode]?.districts\n                ? max(Object.values(data[districtCode].districts), (districtData) =>\n                    getTotalStatistic(districtData, statistic)\n                  )\n                : 0\n            );\n    }, [data, currentMap.option, currentMap.view, statistic]);\n    \n    const statisticTotal = useMemo(() => {\n        return getTotalStatistic(\n          data[currentMap.code],\n          statistic,\n          currentMap.option === MAP_OPTIONS.PER_MILLION\n            ? DISTRICT_POPULATIONS_MIL[currentMap.code]\n            : 1\n        );\n    }, [data, currentMap.code, currentMap.option, statistic]);\n    \n    const mapScale = useMemo(() => {\n        if (currentMap.option === MAP_OPTIONS.ZONES) {\n          return scaleOrdinal(Object.keys(ZONE_COLORS), Object.values(ZONE_COLORS));\n        } else if (currentMap.option === MAP_OPTIONS.HOTSPOTS) {\n          return scaleSqrt([0, Math.max(statisticMax, 1)], [0, 40])\n            .clamp(true)\n            .nice(3);\n        } else {\n          return scaleSequential(\n            [0, Math.max(1, statisticMax)],\n            colorInterpolator[statistic]\n          ).clamp(true);\n        }\n    }, [currentMap.option, statistic, statisticMax]);\n    \n    useEffect(() => {\n        console.log(geoData)\n        const topology = topojson.feature(\n          geoData,\n          geoData.objects[mapMeta.graphObjectStates || mapMeta.graphObjectDistricts]\n        );\n    \n        const svg = select(svgRef.current);\n    \n        const projection = geoMercator().fitSize([width, height], topology);\n        const path = geoPath(projection);\n    \n        let features =\n          currentMap.view === MAP_TYPES.DISTRICT\n            ? topojson.feature(geoData, geoData.objects[mapMeta.graphObjectStates])\n                .features\n            : mapMeta.mapType === MAP_TYPES.COUNTRY &&\n              currentMap.option === MAP_OPTIONS.HOTSPOTS\n            ? [\n                ...topojson.feature(\n                  geoData,\n                  geoData.objects[mapMeta.graphObjectStates]\n                ).features,\n                ...topojson.feature(\n                  geoData,\n                  geoData.objects[mapMeta.graphObjectDistricts]\n                ).features,\n              ]\n            : topojson.feature(\n                geoData,\n                geoData.objects[mapMeta.graphObjectDistricts]\n              ).features;\n    \n        // Add id to each feature\n        features = features.map((f) => {\n          const district = f.properties.district;\n          const state = f.properties.st_nm;\n          const obj = Object.assign({}, f);\n          obj.id = `${currentMap.code}-${state}${district ? '-' + district : ''}`;\n          return obj;\n        });\n    \n        const fillColor = (d) => {\n          const stateCode = DISTRICT_CODES[d.properties.st_nm];\n          const district = d.properties.district;\n          const stateData = data[stateCode];\n          const districtData = stateData?.districts?.[district];\n          let n;\n          if (currentMap.option === MAP_OPTIONS.ZONES) {\n            n = districtData?.zone || 0;\n          } else {\n            if (district) n = getTotalStatistic(districtData, statistic);\n            else\n              n = getTotalStatistic(\n                stateData,\n                statistic,\n                currentMap.option === MAP_OPTIONS.PER_MILLION\n                  ? DISTRICT_POPULATIONS_MIL[stateCode]\n                  : 1\n              );\n          }\n          const color = n === 0 ? '#ffffff00' : mapScale(n);\n          return color;\n        };\n    \n        const strokeColor = (d) => {\n          return currentMap.option === MAP_OPTIONS.ZONES\n            ? '#343a40'\n            : COLORS[statistic];\n        };\n    \n        /* Draw map */\n        const t = transition().duration(D3_TRANSITION_DURATION);\n        let onceTouchedRegion = null;\n        const regionSelection = svg\n          .select('.regions')\n          .selectAll('path')\n          .data(\n            currentMap.option !== MAP_OPTIONS.HOTSPOTS ? features : [],\n            (d) => d.id\n          )\n          .join(\n            (enter) => {\n              const sel = enter\n                .append('path')\n                .attr('d', path)\n                .attr('stroke-width', 1.8)\n                .attr('stroke-opacity', 0)\n                .style('cursor', 'pointer')\n                .on('mouseenter', (d) => {\n                  setRegionHighlighted({\n                    stateCode: DISTRICT_CODES[d.properties.st_nm],\n                    districtName: d.properties.district,\n                  });\n                })\n                .on('mouseleave', (d) => {\n                  if (onceTouchedRegion === d) onceTouchedRegion = null;\n                })\n                .on('touchstart', (d) => {\n                  if (onceTouchedRegion === d) onceTouchedRegion = null;\n                  else onceTouchedRegion = d;\n                })\n                .attr('fill', fillColor)\n                .attr('stroke', strokeColor);\n              sel.append('title');\n              return sel;\n            },\n            (update) =>\n              update.call((update) =>\n                update\n                  .transition(t)\n                  .attr('fill', fillColor)\n                  .attr('stroke', strokeColor)\n              )\n          )\n          .attr('pointer-events', 'all')\n          .on('click', (d) => {\n            event.stopPropagation();\n            const stateCode = DISTRICT_CODES[d.properties.st_nm];\n            if (\n              onceTouchedRegion ||\n              mapMeta.mapType === MAP_TYPES.STATE ||\n              !data[stateCode]?.districts\n            )\n              return;\n            // Disable pointer events till the new map is rendered\n            svg.attr('pointer-events', 'none');\n            svg.select('.regions').selectAll('path').attr('pointer-events', 'none');\n            // Switch map\n            changeMap(DISTRICT_CODES[d.properties.st_nm]);\n          });\n    \n        regionSelection.select('title').text((d) => {\n            if (currentMap.option === MAP_OPTIONS.TOTAL) {\n                const state = d.properties.st_nm;\n                const stateCode = DISTRICT_CODES[state];\n                const district = d.properties.district;\n        \n                const stateData = data[stateCode];\n                const districtData = stateData?.districts?.[district];\n                let n;\n                if (district) n = getTotalStatistic(districtData, statistic);\n                else n = getTotalStatistic(stateData, statistic);\n                return (\n                formatNumber(100 * (n / (statisticTotal || 0.001))) +\n                '% from ' +\n                capitalizeAll(district ? district : state)\n                );\n            }\n        });\n    \n        svg\n          .transition()\n          .duration(mapMeta.mapType === MAP_TYPES.STATE ? t.duration() / 2 : 0)\n          .on('end', () =>\n            svg.attr('class', currentMap.option === MAP_OPTIONS.ZONES ? 'zone' : '')\n          );\n    });     \n\n    return (\n        <React.Fragment>\n            <div className=\"svg-parent\">\n            <svg\n                id=\"chart\"\n                viewBox={`0 0 ${width} ${height}`}\n                preserveAspectRatio=\"xMidYMid meet\"\n                ref={svgRef}\n            >\n                <g className=\"regions\" />\n                <g className=\"state-borders\" />\n                {currentMap.view === MAP_TYPES.DISTRICTS && (\n                <g className=\"district-borders\" />\n                )}\n                {currentMap.option === MAP_OPTIONS.HOTSPOTS && (\n                <g className=\"circles\" />\n                )}\n            </svg>\n            {mapMeta.mapType === MAP_TYPES.STATE &&\n                !!getTotalStatistic(\n                data[currentMap.code]?.districts?.[UNKNOWN_DISTRICT_KEY],\n                statistic\n                ) && (\n                <div className=\"disclaimer\">\n                    <Icon.AlertCircle />\n                    {t('District-wise {{statistic}} numbers need reconciliation', {\n                    statistic: t(statistic),\n                    })}\n                </div>\n                )}\n            </div>\n    \n            {/* {mapScale && (\n            <MapLegend\n                data={data}\n                mapScale={mapScale}\n                mapOption={currentMap.option}\n                statistic={statistic}\n            />\n            )} */}\n    \n            <svg style={{position: 'absolute', height: 0}}>\n            <defs>\n                <filter id=\"balance-color\" colorInterpolationFilters=\"sRGB\">\n                <feColorMatrix\n                    type=\"matrix\"\n                    values=\"0.91372549  0           0            0  0.08627451\n                            0           0.91372549  0            0  0.08627451\n                            0           0           0.854901961  0  0.145098039\n                            0           0           0            1  0\"\n                />\n                </filter>\n            </defs>\n            </svg>\n        </React.Fragment>\n    );\n}\n\nexport default MapVisualizer;"],"sourceRoot":""}