{"version":3,"sources":["components/navbar.js","utils/scrollToTop.js","App.js"],"names":["Navbar","ScrollToTop","pathname","useLocation","useEffect","window","scrollTo","ReactGA","initialize","TRACKING_ID","pageview","location","search","schemaMarkup","name","alternateName","url","image","Home","lazy","FAQ","Statistics","App","useDarkMode","pages","pageLink","view","displayName","showInNavbar","className","Helmet","type","JSON","stringify","fallback","render","Fragment","map","page","index","exact","path","match","key","to"],"mappings":"wYAiLeA,I,gBC9KA,SAASC,IAAe,IAC7BC,EAAaC,cAAbD,SAMR,OAJAE,qBAAU,WACRC,OAAOC,SAAS,EAAG,KAClB,CAACJ,IAEG,K,uCCaTK,IAAQC,WAAWC,KACnBF,IAAQG,SAASL,OAAOM,SAAST,SAAWG,OAAOM,SAASC,QAG5D,IAAMC,EAAe,CACnB,WAAY,qBACZ,QAAS,KACTC,KAAM,4CACNC,cAAe,4BACfC,IAAK,uBACLC,MAAO,IAGHC,EAAOC,gBAAK,kBAChB,uDAGIC,EAAMD,gBAAK,kBACf,iCAGIE,EAAaF,gBAAK,kBACtB,uDAyFaG,UAtFf,WACmBC,aAAY,GAA7B,IAGMC,EAAQ,CACZ,CACEC,SAAU,SACVC,KAAMN,EACNO,YAAa,QACbC,cAAc,GAEhB,CACEH,SAAU,SACVC,KAAML,EACNM,YAAa,aACbC,cAAc,GAIhB,CACEH,SAAU,kCACVC,KAAMR,EACNS,YAAa,OACbC,cAAc,IAgBlB,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,KACE,4BAAQC,KAAK,uBACVC,KAAKC,UAAUpB,KAUpB,kBAAC,WAAD,CAAUqB,SAAU,+BAClB,kBAAC,IAAD,KACE,kBAACjC,EAAD,MAMA,kBAAC,IAAD,CACEkC,OAAQ,gBAAGxB,EAAH,EAAGA,SAAH,OACN,kBAAC,IAAMyB,SAAP,KACE,kBAAC,IAAD,CAAQzB,SAAUA,GACfa,EAAMa,KAAI,SAACC,EAAMC,GAChB,OACE,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAMH,EAAKb,SACXU,OAAQ,cAAGO,MAAH,OAAe,kBAACJ,EAAKZ,KAAN,OACvBiB,IAAKJ,OAIX,kBAAC,IAAD,CAAUK,GAAG","file":"static/js/App.28634292.chunk.js","sourcesContent":["import locales from \"../i18n/locales.json\";\n\nimport React, { useState, useRef } from \"react\";\nimport * as Icon from \"react-feather\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { useSpring, useTransition, animated } from \"react-spring\";\nimport { useLockBodyScroll, useWindowSize } from \"react-use\";\n\nconst SLIDE_IN = {\n  position: \"absolute\",\n  transform: \"translate3d(-20rem, 0, 0)\",\n  height: \"100vh\",\n  zIndex: -1,\n};\n\nconst SLIDE_OUT = {\n  position: \"absolute\",\n  transform: \"translate3d(10rem, 0, 0)\",\n};\n\nconst SLIDE_IN_MOBILE = {\n  opacity: 1,\n  position: \"absolute\",\n  height: \"100vh\",\n  top: 64,\n  zIndex: 999,\n};\n\nconst SLIDE_OUT_MOBILE = {\n  opacity: 1,\n  position: \"absolute\",\n  height: \"100vh\",\n  top: 64,\n  zIndex: 999,\n};\n\nfunction Navbar({\n  pages,\n  darkMode,\n  showLanguageSwitcher,\n  setShowLanguageSwitcher,\n}) {\n  const { i18n, t } = useTranslation();\n  const currentLanguage = Object.keys(locales).includes(i18n?.language)\n    ? i18n?.language\n    : i18n?.options?.fallbackLng[0];\n\n  const [expand, setExpand] = useState(false);\n\n  useLockBodyScroll(expand);\n  const windowSize = useWindowSize();\n\n  const [spring, set, stop] = useSpring(() => ({ opacity: 0 }));\n  set({ opacity: 1 });\n  stop();\n\n  const transitions = useTransition(expand, null, {\n    from: windowSize.width < 769 ? SLIDE_IN_MOBILE : SLIDE_IN,\n    enter: windowSize.width < 769 ? SLIDE_OUT_MOBILE : SLIDE_OUT,\n    leave: windowSize.width < 769 ? SLIDE_IN_MOBILE : SLIDE_IN,\n    config: { mass: 1, tension: 210, friction: 26 },\n  });\n\n  return (\n    <animated.div className=\"Navbar\" style={spring}>\n      <div\n        className=\"navbar-left\"\n        onClick={() => {\n          setShowLanguageSwitcher((prevState) => !prevState);\n        }}\n      >\n        {locales[currentLanguage]}\n      </div>\n\n      <div className=\"navbar-middle\">\n        <Link\n          to=\"/\"\n          onClick={() => {\n            setExpand(false);\n          }}\n        >\n          Commute\n          <br />\n          <span> NZ</span>\n        </Link>\n      </div>\n\n      <div\n        className=\"navbar-right\"\n        onClick={() => {\n          setExpand(!expand);\n        }}\n        onMouseEnter={() => {\n          if (windowSize.width > 769) {\n            setExpand(true);\n          }\n        }}\n      >\n        {windowSize.width < 769 && (\n          <span>{expand ? t(\"Close\") : t(\"Menu\")}</span>\n        )}\n\n        {windowSize.width > 769 && (\n          <React.Fragment>\n            <span>\n              <Link to=\"/\">\n                <Icon.Home {...activeNavIcon(\"/\")} />\n              </Link>\n            </span>\n            <span>\n              <Link to=\"/about\">\n                <Icon.HelpCircle {...activeNavIcon(\"/about\")} />\n              </Link>\n            </span>\n            <span>\n              {windowSize.width > 768 && <SunMoon {...{ darkMode }} />}\n            </span>\n          </React.Fragment>\n        )}\n      </div>\n\n      {transitions.map(({ item, key, props }) =>\n        item ? (\n          <animated.div key={key} style={props}>\n            <Expand {...{ pages, setExpand, darkMode, windowSize }} />\n          </animated.div>\n        ) : (\n          <animated.div key={key} style={props}></animated.div>\n        )\n      )}\n    </animated.div>\n  );\n}\n\nfunction Expand({ pages, setExpand, darkMode, windowSize }) {\n  const expandElement = useRef(null);\n  const { t } = useTranslation();\n\n  return (\n    <div\n      className=\"expand\"\n      ref={expandElement}\n      onMouseLeave={() => {\n        windowSize.width > 768 && setExpand(false);\n      }}\n    >\n      {pages.map((page, i) => {\n        if (page.showInNavbar === true) {\n          return (\n            <Link\n              to={page.pageLink}\n              key={i}\n              onClick={() => {\n                setExpand(false);\n              }}\n            >\n              <span\n                {...navLinkProps(page.pageLink, page.animationDelayForNavbar)}\n              >\n                {t(page.displayName)}\n              </span>\n            </Link>\n          );\n        }\n        return null;\n      })}\n\n      {windowSize.width < 768 && <SunMoon {...{ darkMode }} />}\n\n      <div className=\"expand-bottom\">\n        <h5>{t(\"Powered by NZ Stats\")}</h5>\n      </div>\n    </div>\n  );\n}\n\nexport default Navbar;\n\nconst navLinkProps = (path, animationDelay) => ({\n  className: `${window.location.pathname === path ? \"focused\" : \"\"}`,\n});\n\nconst activeNavIcon = (path) => ({\n  style: {\n    stroke: window.location.pathname === path ? \"#4c75f2\" : \"\",\n  },\n});\n\nconst SunMoon = ({ darkMode }) => {\n  return (\n    <div\n      className=\"SunMoon\"\n      onClick={() => {\n        darkMode.toggle();\n      }}\n    >\n      <div>\n        {darkMode.value ? <Icon.Sun color={\"#ffc107\"} /> : <Icon.Moon />}\n      </div>\n    </div>\n  );\n};\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}\n","import React, { lazy, Suspense } from \"react\";\nimport \"./App.scss\";\nimport './additional.scss';\nimport './mobile.scss';\n// import './App.css';\nimport Navbar from \"./components/navbar.js\";\nimport { Helmet } from \"react-helmet\";\nimport ScrollToTop from \"./utils/scrollToTop\";\nimport useDarkMode from \"use-dark-mode\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\nimport {\n  TRACKING_ID\n} from './constants';\nimport \"firebase/analytics\";\n\n\n// ANALYTICS \nimport ReactGA from 'react-ga';\nReactGA.initialize(TRACKING_ID);\nReactGA.pageview(window.location.pathname + window.location.search);\n// END OF ANALYTICS\n\nconst schemaMarkup = {\n  \"@context\": \"http://schema.org/\",\n  \"@type\": \"GO\",\n  name: \"Visualizing Commuter Data | NZ Statistics\",\n  alternateName: \"NZ Commuter Visualization\",\n  url: \"http://nzcommute.com\",\n  image: \"\",\n};\n\nconst Home = lazy(() =>\n  import(\"./components/home\" /* webpackChunkName: \"Home\" */)\n);\n\nconst FAQ = lazy(() =>\n  import(\"./components/faq\" /* webpackChunkName: \"About\" */)\n);\n\nconst Statistics = lazy(() =>\n  import(\"./components/statistics\" /* webpackChunkName: \"District\" */)\n);\n\nfunction App() {\n  const darkMode = useDarkMode(false);\n  // const [showLanguageSwitcher, setShowLanguageSwitcher] = useState(false);\n\n  const pages = [\n    {\n      pageLink: \"/about\",\n      view: FAQ,\n      displayName: \"About\",\n      showInNavbar: true,\n    },\n    {\n      pageLink: \"/stats\",\n      view: Statistics,\n      displayName: \"Statistics\",\n      showInNavbar: true,\n    },\n    // Lat/Lon coordinates as a route destination\n    // :latlng is \n    {\n      pageLink: \"/(location)?/:lat?/:lng?/:zoom?\",\n      view: Home,\n      displayName: \"Home\",\n      showInNavbar: true,\n    },\n    // {\n    //   pageLink: \"/\",\n    //   view: Home,\n    //   displayName: \"Home\",\n    //   showInNavbar: true,\n    // },\n    // {\n    //   pageLink: \"/district/:districtCode\",\n    //   view: District,\n    //   displayName: \"Regional District\",\n    //   showInNavbar: false,\n    // },\n  ];\n\n  return (\n    <div className=\"App\">\n      <Helmet>\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaMarkup)}\n        </script>\n      </Helmet>\n\n      {/* <Suspense fallback={<div />}>\n        <LanguageSwitcher\n          {...{showLanguageSwitcher, setShowLanguageSwitcher}}\n        />\n      </Suspense> */}\n\n      <Suspense fallback={<div />}>\n        <Router>\n          <ScrollToTop />\n          {/* <Navbar\n            pages={pages}\n            {...{ darkMode }}\n            // {...{showLanguageSwitcher, setShowLanguageSwitcher}}\n          /> */}\n          <Route\n            render={({ location }) => (\n              <React.Fragment>\n                <Switch location={location}>\n                  {pages.map((page, index) => {\n                    return (\n                      <Route\n                        exact\n                        path={page.pageLink}\n                        render={({ match }) => <page.view />}\n                        key={index}\n                      />\n                    );\n                  })}\n                  <Redirect to=\"/\" />\n                </Switch>\n              </React.Fragment>\n            )}\n          />\n        </Router>\n      </Suspense>\n    </div>\n  );\n}\n\nexport default App;\n"],"sourceRoot":""}