{"version":3,"sources":["constants.js","utils/commonFunctions.js","i18n/index.js","serviceWorker.js","index.js"],"names":["DATA_URL_ROOT","TRACKING_ID","MAP_STROKE_WIDTH","MAP_CIRCLE_RADIUS","REGION_STROKE_WIDTH","MODES_OF_TRANSPORT","COLORS","Stay_home","Drive_own_vehicle","Passenger_in_vehicle","Train","Bicycle","Walk_jog","Bus","Ferry","Other","COMMUTE_PURPOSE_COLOUR","WORK","EDUCATION","COMMUTE_METHOD_COLOUR","DB_2_COMMUTE_METHOD","COMMUTE_TYPE_COLOUR_KEYS","forEach","value","replace","MAP_TYPES","COUNTRY","DISTRICT","MAP_OPTIONS","TOTAL","NZ_ISO_SUFFIX","LOCALE_SHORTHANDS","english","D3_TRANSITION_DURATION","MAP_LEGEND_HEIGHT","ZONE_COLORS","Red","Orange","Green","MAP_META","NZ","geoDataFile","mapType","graphObjectStates","graphObjectDistricts","CITY_NAMES","Auckland","Franklin","Manukau","Hamilton","Hauraki","Otorohanga","Rotorua","Taupo","Rodney","Waitakere","Opotiki","cityCodesMap","Object","keys","map","key","index","CITY_CODES","DISTRICT_POPULATIONS_MIL","NORTHLAND","AUCKLAND","WAIKATO","BAY_OF_PLENTY","GISBORNE","HAWKES_BAY","TARANAKI","MANAWATU_WHANGANUI","WELLINGTON","TASMAN","NELSON","MARLBOROUGH","WEST_COAST","CANTERBURY","OTAGO","SOUTHLAND","isDevelopmentOrTest","capitalize","s","charAt","toUpperCase","slice","capitalizeAll","str","toLowerCase","split","i","length","join","getStatistic","data","statistic","Math","max","educationStatistic2Key","fetcher","url","fetch","then","response","text","csv","txt2Array","catch","err","console","log","fetcherJSON","json","error","fetcherDICT","dict","d","k","allText","allTextLines","headers","lines","row","j","push","i18n","use","Backend","LanguageDetector","initReactI18next","init","debug","keySeparator","returnEmptyString","fallbackLng","load","backend","loadPath","addPath","saveMissing","interpolation","escapeValue","Boolean","window","location","hostname","match","App","lazy","ReactDOM","render","fallback","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.723f6b38.chunk.js","sourcesContent":["// Server address providing map data, localization, and any other json files\nconst DEBUG = false;\nexport const DATA_URL_ROOT = DEBUG \n  ? \"http://localhost:5000\"\n  : \"https://nz-commute.ts.r.appspot.com\";\nexport const BASE_URL = DEBUG\n  ? \"http://localhost:3000/\"\n  : \"https://nzcommute.com/\";\nexport const TRACKING_ID = 'UA-172497512-1';\n\nexport const MAP_STROKE_WIDTH = 0.25; //0.05\nexport const MAP_STROKE_WIDTH_HIGHLIGHTED = 0.5;\nexport const MAP_CIRCLE_RADIUS = 0.5;\nexport const REGION_STROKE_WIDTH = 0.2;\n\nexport const MODES_OF_TRANSPORT = [\n  \"Stay home\", //\"Work/Study from home\",\n  \"Drive own vehicle\",\n  \"Passenger in vehicle\",//\"Passenger in car/truck/van\",\n  \"Train\",\n  \"Bicycle\",\n  \"Walk or jog\",\n  \"Bus\", //\"School/Public bus\",\n  \"Ferry\",\n  \"Other\"\n];\n\nexport const COLORS = {\n  Stay_home: \"#ff073a\",\n  Drive_own_vehicle: \"#007bff\",\n  Passenger_in_vehicle: \"#28a745\",\n  Train: \"#6c757d\",\n  Bicycle: \"#4b1eaa\",\n  Walk_jog: \"#d73027\",\n  Bus: \"#fee08b\",\n  Ferry: \"blue\",\n  Other: \"gray\"\n};\n\nexport const COMMUTE_PURPOSE_COLOUR = {\n  // TOTAL: \"#d73027\",\n  WORK: \"#fc7703\",//\"#fee08b\",\n  EDUCATION: \"#007bff\"//\"#66bd63\",\n}\n\nexport const COMMUTE_METHOD_COLOUR = {\n  \"Stay home\": \"#f54242\",\n  \"Drive own vehicle\": \"#f08c22\",\n  \"Passenger in vehicle\": \"#cfc800\",\n  \"Train\": \"#a9ed21\",\n  \"Bicycle\": \"#1de05e\",\n  \"Walk or jog\": \"#1d89db\",\n  \"Bus\": \"#a14aff\",\n  \"Ferry\": \"#384fe8\",\n  \"Other\": \"#a1a3b3\",\n}\n\nexport const DB_2_COMMUTE_METHOD = {\n  \"HOME\": \"Stay home\",\n  \"DRIVE_OWN_VEHICLE\": \"Drive own vehicle\",\n  \"PASSENGER_IN_VEHICLE\": \"Passenger in vehicle\",\n  \"TRAIN\": \"Train\",\n  \"BICYCLE\": \"Bicycle\",\n  \"BUS\": \"Bus\",\n  \"FERRY\": \"Ferry\",\n  \"WALK_OR_JOG\": \"Walk or jog\",\n  \"OTHER\": \"Other\"\n}\n\n\n\n//export const WORK_COLOUR = ;\n//export const EDUCATION_COLOUR = ;\n\nexport const COMMUTE_TYPE_COLOUR_KEYS = {};\nMODES_OF_TRANSPORT.forEach((value)=>{\n  COMMUTE_TYPE_COLOUR_KEYS[value] = value.replace(/[ ]|\\//g,'_');\n});\n\n// What to show at the top\nexport const DISTRICT_STATISTICS_TOTAL = [\n  \"Total\",\n  // Combine these two into one.\n  \"Study at home\",\n  \"Work from home\",\n  // -------------------\n  // Combine these 3 into one\n  \"Drive private car/truck/van\",\n  \"Drive company car/truck/van\",\n  \"Drive a car/truck/van\",\n  // -------------------\n  \"Passenger in car/truck/van\", // Combine between work & student\n  \"Train\",\n  \"Bicycle\",\n  \"Walk/jog\",\n  \"School bus\",\n  \"Public bus\",\n  \"Ferry\",\n  \"Other\",\n  \"Commute distance\" \n];\n\nexport const DISTRICT_STATISTICS_WORK = [\n  \"Total\",\n  \"Work from home\",\n  \"Drive private car/truck/van\",\n  \"Drive company car/truck/van\",\n  \"Passenger in car/truck/van\",\n  \"Train\",\n  \"Bicycle\",\n  \"Walk/jog\",\n  \"Public bus\",\n  \"Ferry\",\n  \"Other\",\n  \"Commute distance\",\n]\n\nexport const DISTRICT_STATISTICS_EDUCATION = [\n  \"Total\",\n  \"Study at home\",\n  \"Drive a car/truck/van\",\n  \"Passenger in car/truck/van\",\n  \"Train\",\n  \"Bicycle\",\n  \"Walk/jog\",\n  \"School bus\",\n  \"Public bus\",\n  \"Ferry\",\n  \"Other\",\n  \"Commute distance\" \n]\n\n// Data to show for overall data\nexport const DISTRICT_SUMMARY = [\n  \"Total\",\n  \"Number of routes\",\n  \"Drive a car/truck/van\",\n  \"Passenger in car/truck/van\",\n  \"Train\",\n  \"Bicycle\",\n  \"Walk/jog\",\n  \"School bus\",\n  \"Public bus\",\n  \"Ferry\",\n  \"Other\",\n  \"Average commute distance\", // Sum / total of all Haversine distances.\n]\n\n// Data created for each circle\nexport const CENTROID_SUMMARY = [\n  \"Total\",\n  \"Study at home\",\n  \"Drive a car/truck/van\",\n  \"Passenger in car/truck/van\",\n  \"Train\",\n  \"Bicycle\",\n  \"Walk/jog\",\n  \"School bus\",\n  \"Public bus\",\n  \"Ferry\",\n  \"Other\",\n  \"Average commute distance from here\", \n]\n\nexport const MAP_TYPES = {\n  COUNTRY: 0,\n  DISTRICT: 1,\n};\n\nexport const MAP_OPTIONS = {\n  TOTAL: \"Total\",\n  WORK: \"Work\",\n  EDUCATION: \"Education\",\n};\n\n// ISO suffix of things.\nexport const NZ_ISO_SUFFIX = \"T00:00:00+12:00\";\n\nexport const LOCALE_SHORTHANDS = {\n  english: \"en-US\",\n};\n\nexport const D3_TRANSITION_DURATION = 300;\n\nexport const MAP_LEGEND_HEIGHT = 50;\n\nexport const ZONE_COLORS = {\n  Red: \"#d73027\",\n  Orange: \"#fee08b\",\n  Green: \"#66bd63\",\n};\n\n\nexport const MAPS_DIR =\n  process.env.NODE_ENV === \"production\" ? \"/maps\" : \"/maps\";\n\nexport const MAP_META = {\n  NZ: {\n    geoDataFile: `${MAPS_DIR}/new-zealand-districts.json`,\n    // geoDataFile: `${MAPS_DIR}/andhrapradesh.json`,\n    mapType: MAP_TYPES.COUNTRY,\n    graphObjectStates: \"NZL_adm2\",\n    graphObjectDistricts: \"NZL_adm2\",\n  },\n};\n\nexport const UNKNOWN_DISTRICT_KEY = \"Unknown\";\n\nexport const DISTRICT_NAMES = {\n  Northland: \"Northland\",\n  Auckland: \"Auckland\",\n  Waikato: \"Waikato\",\n  'Bay of Plenty': \"Bay of Plenty\",\n  Gisborne: \"Gisborne\",\n  \"Hawke's Bay\": \"Hawke's Bay\",\n  Taranaki: \"Taranaki\",\n  \"Manawatu-Wanganui\": \"Manawatu-Wanganui\",\n  Wellington: \"Wellington\",\n  Tasman: \"Tasman\",\n  Nelson: \"Nelson\",\n  Marlborough: \"Marlborough\",\n  \"West Coast\": \"West Coast\",\n  Canterbury: \"Canterbury\",\n  Otago: \"Otago\",\n  Southland: \"Southland\",\n};\n\nexport const CITY_NAMES = {\n  Auckland: \"Auckland\",\n  Franklin: \"Franklin\",\n  Manukau: \"Manukau\",\n  Hamilton: \"Hamilton\",\n  Hauraki: \"Hauraki\",\n  \"Matamata-Piako\": \"Matamata-Piako\",\n  Otorohanga: \"Otorohanga\",\n  Rotorua: \"Rotorua\",\n  \"South Waikato\": \"South Waikato\",\n  Taupo: \"Taupo\",\n  \"Thames-Coromandel\": \"Thames-Coromandel\",\n  Rodney: \"Rodney\",\n  Waitakere: \"Waitakere\",\n  Opotiki: \"Opotiki\",\n  Rotorua: \"Rotorua\",\n  Taupo: \"Taupo\",\n  \"Western Bay of Plenty\": \"Western Bay of Plenty\",\n  Whakatane: \"Whakatane\",\n  Ashburton: \"Ashburton\",\n  Christchurch: \"Christchurch\",\n  Hurunui: \"Hurunui\",\n  Kaikoura: \"Kaikoura\",\n  Mackenzie: \"Mackenzie\",\n  Selwyn: \"Selwyn\",\n  Timaru: \"Timaru\",\n  Waimakariri: \"Waimakariri\",\n  Waimate: \"Waimate\",\n  Waitaki: \"Waitaki\",\n  Gisborne: \"Gisborne\",\n  \"Central Hawke's Bay\": \"Central Hawke's Bay\",\n  Hastings: \"Hastings\",\n  \"Hastings city\": \"Hastings city\",\n  Napier: \"Napier\",\n  Wairoa: \"Wairoa\",\n  Horowhenua: \"Horowhenua\",\n  Manawatu: \"Manawatu\",\n  \"Palmerston North\": \"Palmerston North\",\n  Rangitikei: \"Rangitikei\",\n  Ruapehu: \"Ruapehu\",\n  Tararua: \"Tararua\",\n  Wanganui: \"Wanganui\",\n  Marlborough: \"Marlborough\",\n  Nelson: \"Nelson\",\n  Tasman: \"Tasman\",\n  \"Far North\": \"Far North\",\n  Kaipara: \"Kaipara\",\n  Whangarei: \"Whangarei\",\n  \"Central Otago\": \"Central Otago\",\n  Clutha: \"Clutha\",\n  Dunedin: \"Dunedin\",\n  \"Queenstown-Lakes\": \"Queenstown-Lakes\",\n  Waitaki: \"Waitaki\",\n  Gore: \"Gore\",\n  Invercargill: \"Invercargill\",\n  Southland: \"Southland\",\n  \"New Plymouth\": \"New Plymouth\",\n  \"South Taranaki\": \"South Taranaki\",\n  Stratford: \"Stratford\",\n  Franklin: \"Franklin\",\n  Waikato: \"Waikato\",\n  Waipa: \"Waipa\",\n  Waitomo: \"Waitomo\",\n  Carterton: \"Carterton\",\n  \"Hutt city\": \"Hutt city\",\n  \"Kapiti Coast\": \"Kapiti Coast\",\n  Masterton: \"Masterton\",\n  Porirua: \"Porirua\",\n  \"South Wairarapa\": \"South Wairarapa\",\n  \"Upper Hutt\": \"Upper Hutt\",\n  Wellington: \"Wellington\",\n  Buller: \"Buller\",\n  Grey: \"Grey\",\n  Westland: \"Westland\",\n}\n\n// CONVERT FROM id >> Human Friendly Name\n// This is required for the highlighting functionality.\nconst cityCodesMap = {};\n// Reverse dictionary of DISTRICT_NAMES;\nObject.keys(CITY_NAMES).map((key, index) => {\n  cityCodesMap[CITY_NAMES[key]] = key;\n  return null;\n});\nexport const CITY_CODES = cityCodesMap;\n\n// https://en.wikipedia.org/wiki/Regions_of_New_Zealand\nexport const DISTRICT_POPULATIONS_MIL = {\n  NORTHLAND: 188700,\n  AUCKLAND: 1642800,\n  WAIKATO: 482100,\n  BAY_OF_PLENTY: 324200,\n  GISBORNE: 49300,\n  HAWKES_BAY: 173700,\n  TARANAKI: 122700,\n  MANAWATU_WHANGANUI: 234500,\n  WELLINGTON: 527800,\n  TASMAN: 54800,\n  NELSON: 52900,\n  MARLBOROUGH: 49200,\n  WEST_COAST: 32600,\n  CANTERBURY: 628600,\n  OTAGO: 236200,\n  SOUTHLAND: 101200,\n};\n","import { NZ_ISO_SUFFIX, LOCALE_SHORTHANDS } from \"../constants\";\n\nimport { format, formatDistance, formatISO, subDays } from \"date-fns\";\nimport { utcToZonedTime } from \"date-fns-tz\";\nimport i18n from \"i18next\";\n\nlet locale = null;\n\nconst getLocale = () => {\n  import(\"date-fns/locale/\").then((localePackage) => {\n    locale =\n      localePackage[\n        LOCALE_SHORTHANDS[i18n.language || window.localStorage.i18nextLng]\n      ];\n  });\n};\n\nexport const isDevelopmentOrTest = () => {\n  if (process.env.NODE_ENV === \"development\" || process.env.NODE_ENV === \"test\")\n    return true;\n  return false;\n};\n\nexport const getNZDate = () => {\n  return utcToZonedTime(new Date(), \"Auckland\");\n};\n\nexport const getNZDateISO = () => {\n  return formatISO(getNZDate(), { representation: \"date\" });\n};\n\nexport const getNZYesterdayISO = () => {\n  return formatISO(subDays(getNZDate(), 1), { representation: \"date\" });\n};\n\nexport const formatLastUpdated = (unformattedDate) => {\n  getLocale();\n  return formatDistance(new Date(unformattedDate), new Date(), {\n    locale: locale,\n  });\n};\n\nexport const parseNZDate = (isoDate) => {\n  return new Date(isoDate + NZ_ISO_SUFFIX);\n};\n\nexport const formatDate = (unformattedDate, formatString) => {\n  if (\n    typeof unformattedDate === \"string\" &&\n    unformattedDate.match(/^\\d{4}-([0]\\d|1[0-2])-([0-2]\\d|3[01])$/g)\n  )\n    unformattedDate += NZ_ISO_SUFFIX;\n  const date = utcToZonedTime(new Date(unformattedDate), \"Auckland\");\n  return format(date, formatString, {\n    locale: locale,\n  });\n};\n\nexport function sliceTimeseriesFromEnd(timeseries, days) {\n  return timeseries.slice(-days);\n}\n\nexport const formatNumber = (value) => {\n  const numberFormatter = new Intl.NumberFormat(\"en-NZ\", {\n    maximumFractionDigits: 2,\n  });\n  return isNaN(value) ? \"-\" : numberFormatter.format(value);\n};\n\nexport const capitalize = (s) => {\n  if (typeof s !== \"string\") return \"\";\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nexport const capitalizeAll = (s) => {\n  if (typeof s !== \"string\") return \"\";\n  const str = s.toLowerCase().split(\" \");\n  for (let i = 0; i < str.length; i++) {\n    str[i] = capitalize(str[i]);\n  }\n  return str.join(\" \");\n};\n\nexport const abbreviate = (s) => {\n  return s.slice(0, 1) + s.slice(1).replace(/[aeiou]/gi, \"\");\n};\n\nexport const toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\nexport const getStatistic = (data, statistic, normalizer = 1) => {\n  let count = 0;\n  \n  // console.log(data, statistic);\n  // const work_at_home = data?.[type]?.\n  // const deceased = data?.[type]?.deceased || 0;\n  // const recovered = data?.[type]?.recovered || 0;\n  // const migrated = data?.[type]?.migrated || 0;\n  // count = confirmed - deceased - recovered - migrated;\n  // console.log(educationStatistic2Key(statistic), data[educationStatistic2Key(statistic)]);\n  return Math.max(data[educationStatistic2Key(statistic)] || 0, 0); // Convert -999 to 0\n};\n\nconst educationStatistic2Key = (s) => {\n  switch(s){\n    case \"School/Public bus\": return \"School_bus\";\n    case \"Work/Study from home\": return \"Study_at_home\";\n    case \"Drive car/truck/van\": return \"Drive_a_car_truck_or_van\";\n    case \"Passenger in car/truck/van\": return \"Passenger_in_a_car_truck_or_van\";\n    case \"Walk/jog\": return \"Walk_or_jog\";\n    default: return s;\n  }\n}\n\nexport const fetcher = (url) => {\n  return fetch(url).then( (response) => {\n    // console.log('got response: ', await response.text());\n    return response.text().then((csv) =>\n      txt2Array(csv)\n    ) //.json();\n  })\n  .catch(function(err) {\n    console.log(\"Error fetching data: \", err);\n  });\n};\n\nexport const fetcherJSON = (url) => {\n  return fetch(url).then((response) => {\n    return response.json();\n  })\n  .catch(err => {\n    console.error(\"Error fetching data: \", err);\n  })\n}\n\n// Centroid data fetcher dict{key: txt2Array(csv)}\nexport const fetcherDICT = (url) => {\n  return fetch(url).then((response) => {\n    return response.json().then(dict => {\n      const d = {};\n      // console.log(\"dict: \", dict);\n      Object.keys(dict).forEach((k) => {\n        d[k] = txt2Array(dict[k]);\n      })\n      // console.log(\"d: \", d);\n      return d;\n    })\n  })\n}\n\n// Convert input text into an array of objects\nexport const txt2Array = (allText) => {\n  // console.log('allText: ', allText)\n  var allTextLines = allText.split(/\\r\\n|\\n/);\n  // console.log(allTextLines.length);\n  var headers = allTextLines[0].split(\",\");\n  var lines = [];\n\n  for (var i = 1; i < allTextLines.length; i++) {\n    var data = allTextLines[i].split(\",\");\n    if (data.length == headers.length) {\n      var row = {};\n      // Need to skip the first one, but will do this on the serverside after sanitizing data\n      for (var j = 0; j < headers.length; j++) {\n        row[headers[j]] = data[j];\n      }\n      lines.push(row);\n    }\n  }\n  return lines;\n};\n\n","import { isDevelopmentOrTest } from \"../utils/commonFunctions\";\n\nimport i18n from \"i18next\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport Backend from \"i18next-http-backend\";\nimport { initReactI18next } from \"react-i18next\";\n\nconst DEBUG = false;\n\ni18n\n  .use(Backend)\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    debug: isDevelopmentOrTest() && DEBUG,\n    keySeparator: false,\n    returnEmptyString: false,\n    fallbackLng: \"english\",\n    load: \"languageOnly\",\n    backend: {\n      loadPath: \"http://localhost:5000/locale_{{lng}}\", //'https://api.covid19india.org/locales/locale_{{lng}}.json',\n      addPath: \"http://localhost:9999/\",\n    },\n    saveMissing: isDevelopmentOrTest() && DEBUG,\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n\nexport default i18n;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { lazy, Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./wdyr.js\";\nimport \"./i18n\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst App = lazy(() => import(\"./App\" /* webpackChunkName: \"App\" */));\n\nReactDOM.render(\n  <Suspense fallback={<div />}>\n    <App />\n  </Suspense>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}