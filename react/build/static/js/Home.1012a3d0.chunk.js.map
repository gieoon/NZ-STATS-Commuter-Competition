{"version":3,"sources":["hooks/useStickySwr.js","components/home.jsx"],"names":["useStickySWR","key","fetcher","swrOptions","useState","options","setOptions","args","useSWR","data","isValidating","error","rest","console","log","useUpdateEffect","produce","draftOptions","initialData","MapExplorer","lazy","Home","props","mapStatistic","setMapStatistic","anchor","setAnchor","id","regionalData","districtCode","cityName","regionHighlighted","setRegionHighlighted","workData","DATA_URL_ROOT","revalidateOnMount","revalidateOnFocus","educationData","regionalWorkData","fetcherJSON","regionalEducationData","regionalTotalData","centroidData","fetcherDICT","destinationData","nzMap","useRef","isVisible","useIsVisible","once","Fragment","Helmet","name","content","className","ref","fallback"],"mappings":"6OAiCeA,MA5BR,SAAsBC,EAAKC,EAASC,GAAqB,IAAC,IAAD,EAChCC,mBAASD,GADuB,mBACvDE,EADuD,KAC9CC,EAD8C,wBAANC,EAAM,iCAANA,EAAM,wBAGfC,IAAM,WAAN,GAC7CP,EACAC,EACAG,GAH6C,OAI1CE,IAJGE,EAHsD,EAGtDA,KAAMC,EAHgD,EAGhDA,aAAcC,EAHkC,EAGlCA,MAAUC,EAHwB,+CAoB9D,OAVID,GAAOE,QAAQC,IAAI,cAAeH,GAEtCI,aAAgB,WACdT,EACEU,YAAQX,GAAS,SAACY,GAChBA,EAAaC,YAAcT,QAG9B,CAACA,IAEG,eACFG,EADL,CAEEF,eACAC,QACAF,U,iBCrBEU,EAAcC,gBAAK,kBACvB,iCA2IaC,UAxIf,SAAcC,GAAQ,IAAD,EACqBlB,mBAAS,UAD9B,mBACZmB,EADY,KACEC,EADF,OAGSpB,mBAAS,MAHlB,mBAGZqB,EAHY,KAGJC,EAHI,OAK+BtB,mBAAS,CACzDuB,GAAI,KACJC,aAAc,GACdC,aAAc,KACdC,SAAU,OATO,mBAKZC,EALY,KAKOC,EALP,KAaLC,EAAajC,EACzBkC,IAAgB,YAChBhC,IACA,CACEiC,mBAAmB,EAEnBC,mBAAmB,IANf3B,KAUM4B,EAAkBrC,EAC9BkC,IAAgB,iBAEhBhC,IACA,CACEiC,mBAAmB,EAEnBC,mBAAmB,IAPf3B,KAYM6B,EAAqBtC,EACjCkC,IAAgB,sBAChBK,IACA,CACEJ,mBAAmB,EACnBC,mBAAmB,IALf3B,KASM+B,EAA0BxC,EACtCkC,IAAgB,2BAChBK,IACA,CACEJ,mBAAmB,EACnBC,mBAAmB,IALf3B,KASMgC,EAAsBzC,EAClCkC,IAAgB,uBAChBK,IACA,CACEJ,mBAAmB,EACnBC,mBAAmB,IALf3B,KASMiC,EAAiB1C,EAC7BkC,IAAgB,gBAChBS,IACA,CACER,mBAAmB,EACnBC,mBAAmB,IALf3B,KASMmC,EAAoB5C,EAChCkC,IAAgB,gBAChBK,IACA,CACEJ,mBAAmB,EACnBC,mBAAmB,IALf3B,KASFoC,EAAQC,mBACRC,EAAYC,uBAAaH,EAAO,CAAEI,MAAM,IAc9C,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,KACE,4EACA,0BACEC,KAAK,QACLC,QAAQ,6DAGZ,yBAAKC,UAAU,QAIb,yBAAKA,UAAU,aAAaC,IAAKV,GAC9BE,GACC,kBAAC,IAAMG,SAAP,KACGb,GAAiBJ,GAChB,kBAAC,WAAD,CAAUuB,SAAU,+BAClB,kBAACrC,EAAD,eACEU,aAAa,MACT,CAAEQ,iBACF,CAAEJ,YACF,CAAEK,oBACF,CAAEE,yBACF,CAAEC,qBACF,CAAEC,gBACF,CAAEE,mBACF,CAAErB,eAAcC,mBAChB,CAAEO,oBAAmBC,wBACrB,CAAEP,SAAQC","file":"static/js/Home.1012a3d0.chunk.js","sourcesContent":["import produce from \"immer\";\nimport { useState } from \"react\";\nimport { useUpdateEffect } from \"react-use\";\nimport useSWR from \"swr\";\n\nexport function useStickySWR(key, fetcher, swrOptions, ...args) {\n  const [options, setOptions] = useState(swrOptions);\n\n  const { data, isValidating, error, ...rest } = useSWR(\n    key,\n    fetcher,\n    options,\n    ...args\n  );\n\n  if (error) console.log(\"SWR error: \", error);\n\n  useUpdateEffect(() => {\n    setOptions(\n      produce(options, (draftOptions) => {\n        draftOptions.initialData = data;\n      })\n    );\n  }, [data]);\n\n  return {\n    ...rest,\n    isValidating,\n    error,\n    data,\n  };\n}\n\nexport default useStickySWR;\n","import React, { lazy, useState, useRef, Suspense } from \"react\";\nimport { MAP_META, DATA_URL_ROOT } from \"../constants\";\n// import axios from 'axios';\nimport { fetcher, fetcherJSON, fetcherDICT } from \"../utils/commonFunctions\";\nimport useStickySWR from \"../hooks/useStickySwr\";\nimport { useIsVisible } from \"react-is-visible\";\nimport { Helmet } from \"react-helmet\";\n\nconst MapExplorer = lazy(() =>\n  import(\"./mapExplorer\" /* webpackChunkName: \"MapExplorer\" */)\n);\n\nfunction Home(props) {\n  const [mapStatistic, setMapStatistic] = useState(\"active\");\n\n  const [anchor, setAnchor] = useState(null);\n\n  const [regionHighlighted, setRegionHighlighted] = useState({\n    id: \"NZ\",\n    regionalData: {},\n    districtCode: \"NZ\", // Based on NAME_1\n    cityName: null,\n  });\n\n  \n  const { data: workData } = useStickySWR(\n    DATA_URL_ROOT + \"/work_csv\",\n    fetcher,\n    {\n      revalidateOnMount: true,\n      // refreshInterval: 100000,\n      revalidateOnFocus: false,\n    }\n  );\n\n  const { data: educationData } = useStickySWR(\n    DATA_URL_ROOT + \"/education_csv\",\n    // 'https://api.covid19india.org/v3/min/timeseries.min.json',\n    fetcher,\n    {\n      revalidateOnMount: true,\n      // refreshInterval: 100000,\n      revalidateOnFocus: false,\n    }\n  );\n  \n\n  const { data: regionalWorkData } = useStickySWR(\n    DATA_URL_ROOT + '/work_regional_data',\n    fetcherJSON,\n    {\n      revalidateOnMount: true,\n      revalidateOnFocus: false,\n    }\n  )\n\n  const { data: regionalEducationData } = useStickySWR(\n    DATA_URL_ROOT + '/education_regional_data',\n    fetcherJSON,\n    {\n      revalidateOnMount: true,\n      revalidateOnFocus: false,\n    }\n  )\n\n  const { data: regionalTotalData } = useStickySWR(\n    DATA_URL_ROOT + '/total_regional_data',\n    fetcherJSON,\n    {\n      revalidateOnMount: true,\n      revalidateOnFocus: false\n    }\n  )\n\n  const { data: centroidData } = useStickySWR(\n    DATA_URL_ROOT + '/centroidData',\n    fetcherDICT,\n    {\n      revalidateOnMount: true,\n      revalidateOnFocus: false\n    }\n  )\n\n  const { data: destinationData } = useStickySWR(\n    DATA_URL_ROOT + '/destinations',\n    fetcherJSON,\n    {\n      revalidateOnMount: true,\n      revalidateOnFocus: false\n    }\n  )\n\n  const nzMap = useRef();\n  const isVisible = useIsVisible(nzMap, { once: true });\n\n  // const stateCodes = [\n  //   \"NZ\",\n  //   ...[\n  //     ...new Set([\n  //       ...Object.keys(MAP_META).filter((districtCode) => districtCode !== \"NZ\"),\n  //       ...Object.keys(educationData || {}).filter(\n  //         (districtCode) => districtCode !== \"NZ\"\n  //       ),\n  //     ]),\n  //   ].sort(),\n  // ];\n\n  return (\n    <React.Fragment>\n      <Helmet>\n        <title>Visualization of Commuter Data - NZ Stats</title>\n        <meta\n          name=\"title\"\n          content=\"Visualization of Commuter Data - New Zealand Statistics\"\n        />\n      </Helmet>\n      <div className=\"Home\">\n        {/* {console.log(regionalEducationData)} */}\n        {/* {console.log(\"centroidData: \", centroidData)} */}\n        {/* <LeftPanel /> */}\n        <div className=\"home-right\" ref={nzMap}>\n          {isVisible && (\n            <React.Fragment>\n              {educationData && workData && (\n                <Suspense fallback={<div />}>\n                  <MapExplorer\n                    districtCode=\"NZ\"\n                    {...{ educationData }}\n                    {...{ workData }}\n                    {...{ regionalWorkData }}\n                    {...{ regionalEducationData }}\n                    {...{ regionalTotalData }}\n                    {...{ centroidData }}\n                    {...{ destinationData }}\n                    {...{ mapStatistic, setMapStatistic }}\n                    {...{ regionHighlighted, setRegionHighlighted }}\n                    {...{ anchor, setAnchor }}\n                  />\n                </Suspense>\n              )}\n            </React.Fragment>\n          )}\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default Home;\n\n// // WORK = 50870 rows\n// // EDUCATION = 22430 rows\n// axios.get(DATA_URL_ROOT + '/work_csv')\n//     .then((res) => {\n//         const csv = this.getCSVFromText(res.data);\n//         // console.log('WORK DATA: ', csv);\n//         console.log('WORK DATA: ', csv.length);\n//     });\n\n//     axios.get(DATA_URL_ROOT + '/education_csv')\n//     .then((res) => {\n//         const csv = this.getCSVFromText(res.data);\n//         // console.log('EDUCATION DATA: ', csv);\n//         console.log('EDUCATION DATA: ', csv.length);\n//         console.log(csv[1]);\n//     });\n// }\n"],"sourceRoot":""}