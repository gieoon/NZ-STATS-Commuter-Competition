{"version":3,"sources":["assets/help_white.svg","components/loaders/mapVisualizer.jsx","components/destination.js","components/destinationPopup.js","components/leftPanel.jsx","components/mapExplorer.jsx"],"names":["module","exports","MapVisualizerLoader","width","statistic","windowWidth","window","innerWidth","mapHeight","height","MAP_LEGEND_HEIGHT","viewBox","speed","backgroundColor","COLORS","cx","cy","r","Destination","DestinationPopup","open","setOpen","name1","name","data","useState","hide","setHide","springRef","useRef","topRef","top","useSpring","ref","from","to","config","stiff","size","background","opacity","rest","transRef","transitions","useTransition","item","unique","trail","length","transform","enter","leave","useEffect","setTimeout","useChain","Background","id","onClick","e","target","style","display","pointerEvents","Wrapper","Container","TopDescription","Header","Contents","map","key","props","Item","className","color","marginBottom","key2Display","includes","Number","toFixed","styled","animated","div","h6","h1","SearchBar","lazy","LeftPanel","hoveredRegion","hoveredData","highlightedData","centroidData","currentDestinationData","clickedData","setClickedData","mapRef","t","useTranslation","MODES_OF_TRANSPORT","destinationPopupData","setDestinationPopupData","showDestinationPopup","setShowDestinationPopup","destinationData","useStickySWR","DATA_URL_ROOT","fetcherJSON","revalidateOnMount","revalidateOnFocus","spring","count","Math","floor","COUNT","tension","clamp","duration","km","distance","HAVERSINE_DISTANCE","updateDestinationPopup","destination1","destination","d","Object","keys","filter","f","href","fallback","departure_SA22018_V1_NAME","classnames","COMMUTE_TYPE","paddingTop","DEPARTURE_NAME_1","DESTINATION_NAME_1","destination_SA22018_V1_NAME","alignSelf","paddingLeft","interpolate","toString","paddingBottom","whiteSpace","TYPE","charAt","substring","toLowerCase","COMMUTE_METHOD_2_DISPLAY","src","help","alt","MapVisualizer","CommuteTab","React","memo","districtCode","educationData","workData","regionalEducationData","regionalWorkData","regionalTotalData","regionHighlighted","allCentroidDestinations","setRegionHighlighted","anchor","setAnchor","mapStatistic","setMapStatistic","isCountryLoaded","mapExplorerRef","useHistory","leafletMapRef","code","view","MAP_TYPES","COUNTRY","option","MAP_OPTIONS","TOTAL","currentMap","setCurrentMap","currentView","setCurrentView","undefined","setRegionalData","setHighlightedData","setCurrentDestinationData","hoveredDestination","setHoveredData","values","currentCommuteTypes","setCurrentCommuteTypes","updateCurrentData","educationMapData","WORK","workMapData","EDUCATION","setCurrentData","MAP_META","districtName","switchMap","useCallback","newMapMeta","mapType","STATE","districts","topDistrict","sort","a","b","getStatistic","ReactDOM","unstable_batchedUpdates","cityName","useMemo","hovered","produce","draft","CITY_NAMES","population_millions","DISTRICT_POPULATIONS_MIL","stickied","hidden","current","clientWidth","changeMap","focused","handleTabClick","COMMUTE_PURPOSE_COLOUR","toUpperCase","commuteType","i","prevProps","currProps","equal","stateCode","NZ","meta","total"],"mappings":"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","file":"static/js/MapExplorer.6030fedc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/help_white.ecb08412.svg\";","import { COLORS, MAP_LEGEND_HEIGHT } from \"../../constants\";\n\nimport React from \"react\";\nimport ContentLoader from \"react-content-loader\";\n\n// Margins as declared in CSS\nexport const MAP_BUFFER_MARGINS = 42;\nexport const INDIA_ASPECT_RATIO = 0.885;\n\nconst MapVisualizerLoader = ({ width, statistic }) => {\n  const windowWidth = window.innerWidth;\n  // Default width for loader\n  if (!width) width = windowWidth > 769 ? 480 : windowWidth;\n  // From CSS\n  const scalingFactor = windowWidth > 769 ? 0.9 : 1;\n  const mapHeight = (scalingFactor * width) / INDIA_ASPECT_RATIO;\n  const height = MAP_BUFFER_MARGINS + MAP_LEGEND_HEIGHT + mapHeight;\n  return (\n    <ContentLoader\n      viewBox={`0 0 ${width} ${height}`}\n      height={height}\n      width={width}\n      speed={2}\n      backgroundColor={COLORS[statistic]}\n    >\n      <circle cx={0.4 * width} cy={height / 2} r=\"5\" />\n      <circle cx={0.5 * width} cy={height / 2} r=\"5\" />\n      <circle cx={0.6 * width} cy={height / 2} r=\"5\" />\n    </ContentLoader>\n  );\n};\n\nexport default MapVisualizerLoader;\n","import React from 'react'\nimport {useSprings, animated} from 'react-spring';\n\nfunction Destination({\n    obj,\n    type,\n}){\n    // console.log(\"destination obj: \", obj)\n\n    // const arr = \n    // const springs = useSprings(\n\n    // )\n\n    return(\n        <div>\n            {\n                Object.keys(obj || {}).map((key,index) => (\n                    Number(obj[key]) \n                    ? <p key={type + \"-\" + index} className=\"destination-txt\">{key2Display(key) + \": \" + obj[key]}</p>\n                    : \"\"\n                ))\n            }\n        </div>\n    )\n}\n\nfunction key2Display(key){\n    switch(key){\n        case \"average_distance_of_arriving_commute\": return \"Average distance of arriving commutes\";\n        case \"average_distance_of_departing_commute\": return \"Average distance of departing commutes\"; \n        case \"bicycle_distance\": return \"Average distance travelled by bicycle\";\n        case \"bus_distance\": return \"Average distance travelled by bus\";\n        case \"common_arrival_1\": return \"Most common destination for commutes from\";\n        case \"common_arrival_2\": return \"Second most common destination for commutes from\";\n        case \"common_arrival_3\": return \"Third most common destination for commutes from\";\n        case \"common_destination_1\": return \"Most common destination departing from here\";\n        case \"common_destination_2\": return \"Second most common destination departing from here\";\n        case \"common_destination_3\": return \"Third most common destination departing from here\";\n        case \"education_bicycle_count\": return \"Number of commutes to school by bike\";\n        case \"education_bus_count\": return \"Number of commutes to school by bus\"\n        case \"education_ferry_count\": return \"Number of commutes to school by ferry\"\n        case \"education_home_count\": return \"Studying at home\"\n        case \"education_other_count\": return \"Number of commutes to school by other means\";\n        case \"education_own_vehicle_count\": return \"Number of commutes to school using own vehicle\"\n        case \"education_passenger_count\": return \"Number of commutes to school as a passenger in a vehicle\"\n        case \"education_train_count\": return \"Number of commutes to school by train\"\n        case \"education_walk_or_jog_count\": return \"Number of commutes to school walking/jogging\"\n        case \"ferry_distance\": return \"Average commute distance by ferry\";\n        case \"home_distance\":  return \"Distance commuted from home\";\n        case \"number_of_commutes_arriving\": return \"Number of commutes arriving here\"\n        case \"number_of_commutes_departing\": return \"Number of commutes departing from here\"\n        case \"number_of_people_commuting\": return \"Number of people commuting from/to this destination\";\n        case \"other_distance\": return \"Average commute distance using other means\";\n        case \"own_vehicle_distance\": return \"Average commute distance commuting using own vehicle\";\n        case \"passenger_distance\": return \"Average commute distance commuting as a passenger in a vehicle\";\n        case \"total_bicycle_count\": return \"Number of commutes by bicycle\";\n        case \"total_bus_count\": return \"Number of commutes by bus\";\n        case \"total_ferry_count\": return \"Number of commutes by ferry\";\n        case \"total_home_count\": return \"Number of people working/studying from home\";\n        case \"total_other_count\": return \"Number of commutes by other means\";\n        case \"total_own_vehicle_count\": return \"Number of commutes using own vehicle\";\n        case \"total_passenger_count\": return \"Number of commutes as a passenger\";\n        case \"total_train_count\": return \"Number of commutes using train\";\n        case \"total_walk_or_jog_count\": return \"Number of commutes walking or jogging\"\n        case \"train_distance\": return \"Average commute distance using train\"\n        case \"walk_or_jog_distance\": return \"Average commute distance walking or jogging\"\n        case \"work_bicycle_count\": return \"Number of commutes to work by bicycle \"\n        case \"work_bus_count\": return \"Number of commutes to work by bus\"\n        case \"work_ferry_count\": return \"Number of commutes to work by ferry\"\n        case \"work_home_count\": return \"Working from home\"\n        case \"work_other_count\": return \"Number of commutes to work by other means\"\n        case \"work_own_vehicle_count\": return \"Number of commutes to work using own vehicle\";\n        case \"work_passenger_count\": return \"Number of commutes to work as passenger\"\n        case \"work_train_count\": return \"Number of commutes to work by train\"\n        case \"work_walk_or_jog_count\": return \"Number of commutes to work walking/jogging\";\n        default : return \"\";\n    }\n}\n\nfunction key2HelpDescription(key){\n    switch(key){\n        default: return \"\"\n    }\n}\n\nexport default Destination;","// The popup for the destination, using useChain to create sexy effect\n\nimport React, {useRef, useState, useEffect } from 'react';\nimport { \n    useTransition, \n    useSpring,\n    useChain,\n    config\n} from 'react-spring';\n\n\n\nimport { animated } from 'react-spring'\nimport styled, { createGlobalStyle } from 'styled-components'\n\n\n\nexport default function DestinationPopup({\n    open,\n    setOpen,\n    name1,\n    name,\n    data\n}){\n    // console.log(\"name, data: \",name, data);\n\n    const [hide, setHide] = useState(true);\n\n    const springRef = useRef();\n\n    const topRef = useRef();\n    const {top}  = useSpring({\n        ref: topRef,\n        from: {\n            top: '-500px'\n        },\n        to: {\n            top: open ? '0px' : '-500px',\n        }\n    })\n    // console.log(top, topRef);\n\n    const {size, opacity, ...rest } = useSpring({\n        ref: springRef,\n        config: config.stiff,\n        from: { \n            size: '1%', \n            background: '#161625' ,\n            opacity: 0,\n        },\n        to: { \n            size: open ? '100%' : '1%', \n            background: open ? '#161625' : '#1e1e30',\n            opacity: open ? 1 : 0,\n        }\n    })\n\n    const transRef = useRef();\n    const transitions = useTransition(open ? data : [], item => item[0], {\n        ref: transRef,\n        unique: true,\n        trail: 400 / data.length,\n        from: { opacity: 0, transform: 'scale(0)' },\n        enter: { opacity: 1, transform: 'scale(1)' },\n        leave: { opacity: 0, transform: 'scale(0)' }\n    })\n\n    useEffect(()=>{\n        setTimeout(()=>{\n            setHide(!open);\n        }, 250)\n    },[open])\n    \n    // Turn these into a sequence of animations\n    useChain(open ? [topRef, springRef, transRef] : [transRef, springRef, topRef], [0, open ? 0.15 : 0.3])\n    \n    return (\n        <div>\n        <Background \n            id=\"background\"\n            onClick={(e)=>{\n                // Only close for background, not inner contents\n                if(e.target.id === \"background\"){\n                    setOpen(!open)\n                    \n                }\n            }}\n            style={{\n                display: hide ? 'none' : 'block',\n                pointerEvents: open ? 'all' : 'none',\n                opacity: opacity,\n            }}\n        >\n        </Background>\n\n        <Wrapper id=\"destination-popup-wrapper\">\n            <Container \n                id=\"destination-popup-container\"\n                style={{...rest, width: size, height: size, top: top, opacity: opacity }}\n                // onClick={()=>set(open => !open)}\n            >\n                {\n                    open\n                    ? <>\n                        <TopDescription id=\"destination-popup-top-description\">Details about this location</TopDescription>\n                        <Header id=\"destination-popup-header\">{name1 + \", \"}<br/>{name}</Header>\n                    </>\n                    : \"\"\n                }\n                <Contents id=\"destination-popup-contents\">\n                {\n                    transitions.map(({item, key, props}) => (\n                        <Item key={key} className=\"destination-popup-item\" style={{ ...props, background: '#1e1e30' }}>\n                            <>\n                                <div style={{color:'#6c757d',marginBottom:\"4px\"}}>{key2Display(item[0])}</div>\n                                <div style={{color:'white'}}>{\n                                    key2Display(item[0]).includes('distance')\n                                    ? Number(item[1]).toFixed(2) + 'km'\n                                    : key2Display(item[0]).includes('common')\n                                    ? item[1]\n                                    : key2Display(item[0]).includes('people')\n                                    ? Number(item[1]).toFixed() + ' people'\n                                    : key2Display(item[0]).includes('trips')\n                                    ? Number(item[1]).toFixed() + ' trips'\n                                    : Number(item[1]).toFixed()\n                                }</div>\n                            </>\n                        </Item>\n                    ))\n                }\n                </Contents>\n            </Container>\n        </Wrapper>\n        </div>\n    );\n}\n\nconst Background = styled(animated.div)`\n    position: fixed;\n    top: -8px;\n    left: 0;\n    height: calc(100vh + 8px);\n    width: 100vw;\n    background-color: rgba(0,0,0,.2);\n    z-index: 1001;\n`\n\nconst Wrapper = styled(animated.div)`\n  position: fixed;\n  left: calc(408px + 8px + 8px + 8px);\n  top: calc(8px);\n  z-index: 9999;\n  pointer-events: none;\n`\nconst TopDescription = styled(animated.h6)`\n    margin: 0;\n    font-weight: 200;\n    /* opacity: .45; */\n    color: rgb(108, 117, 125);\n`\n\nconst Header = styled(animated.h1)`\n    margin-top: 8px;\n`\n\nconst Contents = styled(animated.div)`\n    max-height: 70vh;\n    overflow-y: scroll; \n    pointer-events: all;\n`\n\nconst Container = styled(animated.div)`\n  position: relative;\n  display: block;\n  max-width: 300px;\n//   display: grid;\n//   grid-template-columns: repeat(4, minmax(100px, 1fr));\n//   grid-gap: 25px;\n  padding: 25px;\n  background: white;\n  border-radius: 6px;\n  cursor: pointer;\n  box-shadow: 0px 10px 10px -5px rgba(0, 0, 0, 0.05);\n  will-change: width, height;\n`\n\nconst Item = styled(animated.div)`\n//   width: 100%;\n  height: 100%;\n  font-family: 'archia';\n  font-size: 12px;\n  background: white;\n  border-radius: 5px;\n  will-change: transform, opacity;\n  margin: 8px auto;\n  margin-right: 12px;\n  padding: 6px;\n`\n\n// const Global = createGlobalStyle`\n//   * {\n//     box-sizing: border-box;\n//   }`\n\n//   html,\n//   body,\n//   #root {\n//     margin: 0;\n//     padding: 0;\n//     height: 100%;\n//     width: 100%;\n//     overflow: hidden;\n//     user-select: none;\n//     background: lightblue;\n//     padding: 20px;\n//     display: flex;\n//     align-items: center;\n//     justify-content: center;\n//   }\n// `\n\n\n\nconst key2Display = (key) => {\n    switch(key){\n        case 'SA2_name_usual_residence_address': return 'name';\n        case 'number_of_commutes_departing': return 'Number of commute trips departing from here';\n        case 'number_of_commutes_arriving': return 'Number of commute trips arriving here';\n        case 'number_of_people_commuting': return 'Number of people commuting from here';\n        case 'average_distance_of_departing_commute': return 'Average distance of commutes departing from here';\n        case 'average_distance_of_arriving_commute': return 'Average distance of commutes arriving here';\n        // case 'total_bicycle_count': return 'Total number of commute trips by bicycle';\n        // case 'total_bus_count': return 'Total number of commute trips by bus';\n        // case 'total_ferry_count': return 'Total number of commute trips by ferry';\n        // case 'total_home_count': return 'Number of people working from home in this region'\n        // case 'total_other_count': return 'Total number of people commuting by other means'\n        // case 'total_own_vehicle_count': return 'Total number commute trips using own vehicle'\n        // 'total_passenger_count',\n        // 'total_train_count',\n        // 'total_walk_or_jog_count',\n        case 'education_bicycle_count': return 'Number of people commuting to school by bicycle'\n        case 'education_bus_count': return 'Number of people commuting to school by bus';\n        case 'education_ferry_count': return 'Number of people commuting to school by ferry'\n        case 'education_home_count': return 'Number of people studying from home'\n        case 'education_other_count': return 'Number of people commuting to school by other means'\n        case 'education_own_vehicle_count': return 'Number of people commuting to school using their own vehicle'\n        case 'education_passenger_count': return 'Number of people commuting to school as a passenger in a car/truck/van'\n        case 'education_train_count': return 'Number of people commuting to school by train'\n        case 'education_walk_or_jog_count': return 'Number of people commuting to school walking/jogging'\n        case 'work_bicycle_count': return 'Number of people commuting to work on bicycle'\n        case 'work_bus_count': return 'Number of people commuting to work oby bus'\n        case 'work_ferry_count': return 'Number of people commuting to work by ferry'\n        case 'work_home_count': return 'Number of people working from home'\n        case 'work_other_count': return 'Number of people commuting to work by other means'\n        case 'work_own_vehicle_count': return 'Number of people commuting to work using their own or a company vehicle'\n        case 'work_passenger_count': return 'Number of people commuting to work as a passenger'\n        case 'work_train_count': return 'Number of people commuting to work by train'\n        case 'work_walk_or_jog_count': return 'Number of people commuting to work walking/jogging'\n        case 'common_destination_1': return 'Most common destination for people commuting from here'\n        case 'common_destination_2': return 'Second most common destination for people commuting from here'\n        case 'common_destination_3': return 'Third most common destination for people commuting from here'\n        case 'common_arrival_1': return 'Most common destination for people commuting here'\n        case 'common_arrival_2': return 'Second most common destination for people commuting here'\n        case 'common_arrival_3': return 'Third most common destination for people commuting here';\n        case 'bicycle_distance': return 'Average distance commuting on bicycle';\n        case 'bus_distance': return 'Average distance of commute by bus'\n        case 'ferry_distance': return 'Average distance of commute by ferry'\n        // case 'home_distance': return 'Average distance '\n        case 'other_distance': return 'Average distance of commute by other means';\n        case 'own_vehicle_distance': return 'Average distance of commute using own vehicle'\n        case 'passenger_distance': return 'Average distance of commute as a passenger in car/truck/van';\n        case 'train_distance': return 'Average distance of commute by train';\n        case 'walk_or_jog_distance': return 'Average distance of commute walking/jogging';\n        default: return \"\";\n    }\n  }\n  \n  \n  ","import React, {useState, lazy, Suspense} from 'react';\nimport {Link} from 'react-router-dom';\nimport './leftPanel.scss';\nimport classnames from \"classnames\";\nimport { useTranslation } from \"react-i18next\";\nimport { useSprings, useSpring, animated } from \"react-spring\";\nimport useStickySWR from \"../hooks/useStickySwr\";\nimport help from '../assets/help_white.svg';\nimport Destination from './destination.js';\nimport DestinationPopup from './destinationPopup.js';\nimport { fetcherJSON } from \"../utils/commonFunctions\";\nimport {\n    MAP_OPTIONS,\n    MODES_OF_TRANSPORT,\n    DATA_URL_ROOT,\n    COMMUTE_METHOD_2_DISPLAY,\n} from '../constants'\nimport {\n    formatNumber, \n    capitalize,\n    getStatistic,\n} from '../utils/commonFunctions'\nimport { useEffect } from 'react';\n\nconst SearchBar = lazy(() => import('./searchbar'));\n\nfunction LeftPanel({\n    hoveredRegion,\n    hoveredData,\n    highlightedData,\n    centroidData,\n    // allCentroidDestinations,\n    currentDestinationData,\n    clickedData,\n    setClickedData,\n    mapRef,\n}){\n    const { t } = useTranslation();\n\n    const [currentMapStatistics, setCurrentMapStatistics] = useState(MODES_OF_TRANSPORT);\n\n    const [currentCommuteType, setCurrentCommuteType] = useState(\"Total\");\n    \n    const [destinationPopupData, setDestinationPopupData] = useState({\n      name1: \"\",\n      name: \"\",\n      data: [],\n    })\n\n    const [showDestinationPopup, setShowDestinationPopup] = useState(false);\n\n    const { data: destinationData } = useStickySWR(\n      DATA_URL_ROOT + '/destinations',\n      fetcherJSON,\n      {\n        revalidateOnMount: true,\n        revalidateOnFocus: true\n      }\n    )\n    // console.log('destinationData: ', destinationData)\n\n    const spring = useSpring({\n      // This is the default to: value\n      // count: Math.floor(Math.random() * 100),\n      count: Math.floor(clickedData.COUNT) || 0,\n      from: {\n          count: Math.floor(clickedData.COUNT) || 0,\n      },\n      config: {\n        tension: 500,\n        clamp: true,\n        duration: 350,\n      }\n    })\n\n    // console.log(Math.floor(hoveredData.hoveredData.HAVERSINE_DISTANCE))\n    const km = useSpring({\n      distance: Math.floor(clickedData.HAVERSINE_DISTANCE) || 0,\n      from: {\n        distance: Math.floor(clickedData.HAVERSINE_DISTANCE) || 0,\n      },\n      config: {\n        tension: 500,\n        clamp: true,\n        duration: 350,\n      }\n    })\n\n    useEffect(()=>{\n      // console.log('currentDestinationData updated: ', currentDestinationData);\n      // console.log(destinationData);\n    }, [currentDestinationData])\n\n    // useEffect(()=>{\n    //   console.log('destination data changed: ', destinationData);\n    // }, [destinationData])\n\n    const updateDestinationPopup = (destination1, destination) => {\n      // console.log('showing destination: ', destination, destinationData[destination])\n      if(!destinationData || !destinationData[destination]) \n        return;\n      // global.destinationData = destinationData;\n      var d = Object.keys(destinationData[destination])\n        .filter(f => {\n          return (\n            (Number(destinationData[destination][f]) > 0 \n            || (f.includes('common') && destinationData[destination][f] !== \"-990\")\n            ) \n            && (!f.includes('home') && !f.includes('total')))\n        })\n        .map((key) => [key, destinationData[destination][key]])\n      // console.log(d)\n      setDestinationPopupData({\n        name1: destination1,\n        name: destination,\n        //data: Object.entries(destinationData[destination]),\n        data: d,\n      })\n      setShowDestinationPopup(true);\n    }\n    // console.log(\"clickedData: \", clickedData);\n    \n    return(\n        <div className=\"LeftPanel\">\n          <div className=\"inner\">\n            <div className=\"title\"> \n              {/* <div className=\"stats-link\">\n                <Link to=\"/stats\">\n                  View more stats\n                </Link>\n              </div> */}\n              {/* <Link to=\"/\"> */}\n              <a href='/'>\n                <span>New Zealand </span>\n                Commute  \n              </a>\n              {/* </Link> */}\n            </div>\n\n            <Suspense fallback={<div></div>}>\n                <SearchBar \n                  // allCentroidDestinations={allCentroidDestinations}\n                  setClickedData={setClickedData}\n                  mapRef={mapRef}\n                />\n            </Suspense>\n\n            <div className=\"map-stats\">\n              <div\n                    // key={statistic}\n                    // className={classnames(\"stats\", statistic, {\n                    //   focused: statistic === currentCommuteType,\n                    // })}\n                    // onClick={() => clickedCommuteType(statistic)}\n                  >\n                {/* <h5>{t(capitalize(statistic))}</h5> */}\n                \n              </div>\n            </div>\n\n            {/* <div style={{height:\"16px\"}}></div> */}\n            <Suspense fallback={<div></div>}>\n              <div className=\"meta\">\n                {\n                  clickedData.departure_SA22018_V1_NAME && clickedData.departure_SA22018_V1_NAME.length\n                  ? <h2 className={classnames(\"total\",clickedData.COMMUTE_TYPE)}>\n                      <div style={{paddingTop:\"6px\"}}>\n                        {t(\"From \")}\n                        {clickedData.DEPARTURE_NAME_1}\n                        {clickedData.departure_SA22018_V1_NAME && clickedData.departure_SA22018_V1_NAME.length ? \", \" : \"\"}\n                        <div className=\"destination-link\"\n                          onClick={()=>{updateDestinationPopup(clickedData.DEPARTURE_NAME_1, clickedData.departure_SA22018_V1_NAME)}}\n                        >{t(clickedData.departure_SA22018_V1_NAME)}</div>\n                        <div className=\"to\">\n                          {t(\"To \")}\n                          {clickedData.DESTINATION_NAME_1}\n                          { clickedData.DESTINATION_NAME_1 //Or, use DESTINATION_NAME_2\n                          //hoveredData.hoveredDestination.length \n                            ? \", \"\n                            : \"\"  \n                          }\n                          <div className=\"destination-link\"\n                            onClick={()=>{updateDestinationPopup(clickedData.DESTINATION_NAME_1, clickedData.destination_SA22018_V1_NAME)}}\n                          >{clickedData.destination_SA22018_V1_NAME}</div>\n                        </div>\n\n                        {/* { destinationData\n                          ? <div>\n                            <Destination \n                              obj={destinationData[currentDestinationData.from]}\n                              type=\"from\"\n                            />\n                            <Destination \n                              obj={destinationData[currentDestinationData.to]}\n                              type=\"to\"\n                            />\n                          </div>\n                          : \"\"\n                        } */}\n                      </div>\n                    \n                      \n                      <div style={{alignSelf: \"center\",paddingLeft: \"6px\"}}>\n                        <animated.h1>\n                          {km.distance.interpolate((distance) => \n                                // !isNaN(distance) ? distance.toFixed(2) + \"km\" : \"\"\n                                Number(distance).toFixed(2).toString() + \"km\"\n                          )}\n                        </animated.h1>\n                      </div>\n                    </h2>\n                  : \"\"\n                }\n                \n              </div>\n            </Suspense>\n\n            <div className=\"stats-bottom\">\n              { Object.keys(clickedData).length\n                ? <div style={{paddingBottom:\"1em\",paddingTop:\"1em\",display:\"flex\",\"justifyContent\": \"space-between\"}}>\n                  <animated.h1 \n                    style={{whiteSpace: \"nowrap\"}}\n                    className={classnames(clickedData.COMMUTE_TYPE)}>\n                    {spring.count.interpolate((count) => \n                      count > 0\n                      ? Math.floor(count).toFixed() + \" people\"//\" commutes\"\n                      : \"\"\n                    )}\n                  </animated.h1>\n                  <h2 className={classnames(clickedData.COMMUTE_TYPE)}>\n                    {\n                      clickedData.TYPE \n                      ? \"Commuting for \"\n                      : \"\"\n                    }\n                    {(clickedData.TYPE || \"\")\n                      .charAt(0)\n                    + (clickedData.TYPE || \"\")\n                      .substring(1)\n                      .toLowerCase()\n                    }\n                    <br/>\n                    {COMMUTE_METHOD_2_DISPLAY[clickedData.COMMUTE_TYPE]}\n                  </h2>\n                </div>\n                : \"\"\n              }\n            </div>\n\n            <div className=\"about-wrapper\">\n              <Link to=\"/about\">\n                <img src={help} alt=\"\" />\n              </Link>\n            \n              <h6 className={classnames(\"footnote\")}>\n                {/* &dagger;  */}\n                {`${t(\"* Based on 2018 Census by NZ Statistics, see \")}`}\n                <a\n                    href=\"https://datafinder.stats.govt.nz/data/category/census/2018/commuter-view/?_ga=2.217129552.794612537.1592401476-705599149.1592401476\"\n                    target=\"_noblank\"\n                    style={{ color: \"#6c757d\" }}\n                >\n                    {t(\"source\")}\n                </a>\n                <br/>\n                {t(\"Locations have been approximated to protect user privacy\")}\n              </h6>\n            </div>\n          </div>\n\n          <DestinationPopup\n            open={showDestinationPopup}\n            setOpen={setShowDestinationPopup}\n            name1={destinationPopupData.name1}\n            name={destinationPopupData.name}\n            data={destinationPopupData.data}\n          />\n        </div>\n    )\n}\n\nexport default LeftPanel;\n\n/*\n<div>{currentMapStatistics.map((statistic, index) => (\n  <div\n    key={statistic}\n    className={classnames(\"stats\", statistic, {\n      focused: statistic === currentCommuteType,\n    })}\n    onClick={() => clickedCommuteType(statistic)}\n  >\n    <h5>{t(capitalize(statistic))}</h5>\n    <div className=\"stats-bottom\">\n      {hoveredData.hoveredData.COMMUTE_TYPE}\n      <animated.h1>\n        {springs[index].total.interpolate((total) =>\n          formatNumber(Math.floor(total))\n        )}\n        {spring.count.interpolate((count) => \n          formatNumber(Math.floor(count))\n        )}\n      </animated.h1>\n    </div>\n  </div>\n))}\n</div>\n*/\n\n/*\n\n\n          <Suspense fallback={<div></div>}>\n            <div className=\"meta\">\n              <h2 className={classnames(\"total\")}>\n                <div>\n                  {t(\"From \")}\n                  {hoveredData.hoveredData.DEPARTURE_NAME_1}\n                  {hoveredData.hoveredData.departure_SA22018_V1_NAME && hoveredData.hoveredData.departure_SA22018_V1_NAME.length ? \", \" : \"\"}\n                  {t(hoveredData.hoveredData.departure_SA22018_V1_NAME)}\n                  <div>\n                    {t(\"To \")}\n                    {hoveredData.hoveredData.DESTINATION_NAME_1}\n                    { hoveredData.hoveredData.DESTINATION_NAME_1 //Or, use DESTINATION_NAME_2\n                    //hoveredData.hoveredDestination.length \n                      ? \", \"\n                      : \"\"  \n                    }\n                    {hoveredData.hoveredData.destination_SA22018_V1_NAME}\n                  </div>\n\n                  { destinationData\n                    ? <div>\n                      <Destination \n                        obj={destinationData[currentDestinationData.from]}\n                        type=\"from\"\n                      />\n                      <Destination \n                        obj={destinationData[currentDestinationData.to]}\n                        type=\"to\"\n                      />\n                    </div>\n                    : \"\"\n                  }\n                </div>\n              \n                \n                <div style={{alignSelf: \"center\"}}>\n                  {!isNaN(Number(hoveredData.hoveredData.HAVERSINE_DISTANCE))\n                    ? Number(hoveredData.hoveredData.HAVERSINE_DISTANCE).toFixed(2) + \"km\"\n                    : \"\"\n                  }\n                  <animated.h1>\n                    {km.distance.interpolate((distance) => \n                          // !isNaN(distance) ? distance.toFixed(2) + \"km\" : \"\"\n                          distance.toFixed(2).toString() + \"km\"\n                    )}\n                  </animated.h1>\n                </div>\n              </h2>\n            </div>\n          </Suspense>\n*/\n\n/*\n<div className=\"stats-bottom\">\n                  {(hoveredData.hoveredData.COMMUTE_TYPE || \"\")\n                    .replace(/[_]/g,' ')\n                    .toLowerCase()\n                    .charAt(0)\n                    .toUpperCase()\n                    + \n                    (hoveredData.hoveredData.COMMUTE_TYPE || \"\")\n                      .replace(/[_]/g,' ')\n                      .substring(1)\n                      .toLowerCase()\n                  }\n                  <animated.h1>\n                    {spring.count.interpolate((count) => \n                      count > 0\n                      ? Math.floor(count).toFixed() + \" people\"//\" commutes\"\n                      : \"\"\n                  )\n                  }\n                </animated.h1>\n                <h2>\n                  {\n                    hoveredData.hoveredData.TYPE \n                    ? \"Commuting for \"\n                    : \"\"\n                  }\n                  {(hoveredData.hoveredData.TYPE || \"\")\n                    .charAt(0)\n                  + (hoveredData.hoveredData.TYPE || \"\")\n                    .substring(1)\n                    .toLowerCase()\n                  }\n                </h2>\n              </div>\n\n*/","import MapVisualizerLoader from \"./loaders/mapVisualizer\";\n\nimport {\n  MAP_META,\n  MAP_OPTIONS,\n  MODES_OF_TRANSPORT,\n  DISTRICT_STATISTICS_TOTAL,\n  DISTRICT_STATISTICS_WORK,\n  DISTRICT_STATISTICS_EDUCATION,\n  DISTRICT_SUMMARY,\n  COMMUTE_PURPOSE_COLOUR,\n  CENTROID_SUMMARY,\n  MAP_TYPES,\n  CITY_NAMES,\n  UNKNOWN_DISTRICT_KEY,\n  DISTRICT_POPULATIONS_MIL,\n} from \"../constants\";\nimport {\n  capitalize,\n  formatNumber,\n  formatDate,\n  formatLastUpdated,\n  getStatistic,\n} from \"../utils/commonFunctions\";\n\nimport { PinIcon } from \"@primer/octicons-v2-react\";\nimport classnames from \"classnames\";\nimport equal from \"fast-deep-equal\";\nimport produce from \"immer\";\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  Suspense,\n  lazy,\n} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as Icon from \"react-feather\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\nimport { useSprings, animated } from \"react-spring\";\nimport LeftPanel from \"./leftPanel\";\nimport { differenceInSeconds } from \"date-fns/esm\";\n\nconst MapVisualizer = lazy(() =>\n  import(\"./mapVisualizer\" /* webpackChunkName: \"MapVisualizer\" */)\n);\n\nconst CommuteTab = lazy(() => \n  import(\"./commuteTab\" /* webpackChunkName: \"CommuteTab\" */)\n)\n\nfunction MapExplorer({\n  districtCode,\n  educationData,\n  workData,\n  regionalEducationData,\n  regionalWorkData,\n  regionalTotalData,\n  centroidData,\n  allCentroidDestinations,\n  regionHighlighted,\n  setRegionHighlighted,\n  anchor,\n  setAnchor,\n  mapStatistic,\n  setMapStatistic,\n  isCountryLoaded = true,\n}) {\n  const { t } = useTranslation();\n  const history = useHistory();\n\n  const mapExplorerRef = useRef();\n  const leafletMapRef = useRef();\n\n  const mapRef = useRef(null);\n\n  const [currentMap, setCurrentMap] = useState({\n    code: districtCode,\n    view: MAP_TYPES.COUNTRY,\n    option: MAP_OPTIONS.TOTAL\n  });\n\n  // District vs Country view\n  const [currentView, setCurrentView] = useState({\n    view: MAP_TYPES.COUNTRY\n  }); \n  \n  const [regionalData, setRegionalData] = useState(\n    undefined\n  )\n\n  const [highlightedData, setHighlightedData] = useState({});\n\n  const [clickedData, setClickedData] = useState({});\n\n  const [currentDestinationData, setCurrentDestinationData] = useState({\n    from: \"\",\n    to: \"\",\n  })\n\n  // useEffect(()=>{\n  //   console.log('destination data changed: ', destinationData);\n  // },[destinationData])\n\n  // What to display at the top\n  const [currentMapStatistics, setCurrentMapStatistics] = useState(MODES_OF_TRANSPORT);\n// console.log(currentMapStatistics)\n  const [hoveredData, setHoveredData] = useState({\n    hoveredData: {},\n    hoveredDestination: \"\",\n  })\n\n  const [currentCommuteTypes, setCurrentCommuteTypes] = useState(\n    Object.values(MODES_OF_TRANSPORT) // Select all\n    // [\n    //   //\"Drive own vehicle\"\n    //   \"Stay home\"\n    // ]\n  )\n\n  // const setCurrentCommuteTypes = (e) => {\n    // console.log('setCurrentCommuteTypes: ', currentCommuteTypes);\n    // console.log(leafletMapRef);\n    // leafletMapRef.current.updateData();\n  // }\n\n  // useEffect(()=>{\n  //   console.log('current commute types changed: ', currentCommuteTypes)\n  // })\n\n  const updateCurrentData = () => {\n    // console.log(currentMap.option);\n    return {\n      educationMapData: \n        currentMap.option !== MAP_OPTIONS.WORK\n        ? educationData\n        : [],\n      workMapData: \n        currentMap.option !== MAP_OPTIONS.EDUCATION\n        ? workData\n        : []\n    }\n  }\n  // Define data based on the current tab.\n  const [data, setCurrentData] = useState(updateCurrentData);\n\n  const currentMapMeta = MAP_META[currentMap.code];\n\n  // Executes after a state update\n  useEffect(() => {\n    setCurrentData(updateCurrentData);\n    // console.log(\"currentMap.option: \", currentMap.option);\n    setCurrentMap({\n      code: regionHighlighted.districtCode,\n      view: MAP_TYPES.COUNTRY,\n      option: currentMap.option,\n    });\n    // if (regionHighlighted.cityName) {\n    //   if (\n    //     currentMap.code !== regionHighlighted.districtCode &&\n    //     !(\n    //       currentMapMeta.mapType === MAP_TYPES.COUNTRY &&\n    //       currentMap.view === MAP_TYPES.COUNTRY\n    //     )\n    //   ) {\n    //     const newMapMeta = MAP_META[regionHighlighted.districtCode];\n    //     if (!newMapMeta) {\n    //       return;\n    //     }\n    //     // setCurrentMap({\n    //     //   code: regionHighlighted.districtCode,\n    //     //   view: MAP_TYPES.COUNTRY,\n    //     //   option: currentMap.option,\n    //     // });\n    //   }\n    // } else if (isCountryLoaded && currentMapMeta.mapType === MAP_TYPES.COUNTRY) {\n    //   // setCurrentMap({\n    //   //   code: \"NZ\",\n    //   //   view: MAP_TYPES.COUNTRY,\n    //   //   option: currentMap.option,\n    //   // });\n    // }\n  }, [\n    isCountryLoaded,\n    regionHighlighted.districtCode,\n    regionHighlighted.districtName,\n    currentMap.code,\n    currentMap.option,\n    currentMap.view,\n    // currentMapMeta.mapType,\n  ]);\n\n  const switchMap = useCallback(\n    (districtCode) => {\n      const newMapMeta = MAP_META[districtCode];\n      if (!newMapMeta) {\n        return;\n      }\n      if (newMapMeta.mapType === MAP_TYPES.STATE) {\n        const districts = educationData[districtCode].districts || {};\n        const topDistrict = Object.keys(districts).sort(\n          (a, b) =>\n            getStatistic(districts[b], \"total\", mapStatistic) -\n            getStatistic(districts[a], \"total\", mapStatistic)\n        )[0];\n        ReactDOM.unstable_batchedUpdates(() => {\n          setRegionHighlighted({\n            districtCode: districtCode,\n            cityName: topDistrict,\n          });\n          setCurrentMap({\n            code: districtCode,\n            view: MAP_TYPES.COUNTRY,\n            option: currentMap.option,\n          });\n        });\n      } else {\n        ReactDOM.unstable_batchedUpdates(() => {\n          setCurrentMap({\n            code: \"NZ\",\n            view: MAP_TYPES.COUNTRY,\n            option: currentMap.option,\n          });\n          setRegionHighlighted({\n            districtCode: \"NZ\",\n            cityName: null,\n          });\n        });\n      }\n    },\n    [educationData, workData, currentMap.option, mapStatistic, setRegionHighlighted]\n  );\n\n  useEffect(() => {\n    switchMap(districtCode);\n  }, [districtCode, switchMap]);\n\n  // Set the values to be used at the top.\n  // const panelState = useState({\n  //   data: hoveredData.hoveredData\n  // },[data]);\n  /*() => {\n    return produce(data, (draft) => {\n      draft.district = regionHighlighted.districtCode;\n    });\n  }, [\n    data,\n    regionHighlighted.districtCode,\n    currentMap.view,\n    currentMap.code,\n  ]);\n  */\n  // console.log(panelState);\n\n  const hoveredRegion = useMemo(() => {\n    // console.log(hoveredData);\n    const hovered =\n      (regionHighlighted.districtCode\n        ? educationData[regionHighlighted.districtCode]?.districts?.[\n            regionHighlighted.cityName\n          ]\n        : educationData[regionHighlighted.districtCode]) || {};\n    return produce(hovered, (draft) => {\n      draft.name =\n        regionHighlighted.districtCode ||\n        CITY_NAMES[regionHighlighted.districtCode];\n      if (!regionHighlighted.districtCode)\n        draft.population_millions =\n          DISTRICT_POPULATIONS_MIL[regionHighlighted.districtCode];\n    });\n  }, [\n    educationData,\n    workData,\n    regionHighlighted.districtCode,\n    regionHighlighted.cityName,\n  ]);\n\n  const handleTabClick = (option) => {\n    // console.log('moving to tab: ', option);\n    setCurrentMap({\n      code: currentMap.code,\n      view: MAP_TYPES.COUNTRY,\n      option: option,\n    });\n    if (currentView.view === MAP_TYPES.COUNTRY)\n      setRegionHighlighted({\n        districtCode: regionHighlighted.districtCode,\n        cityName: null,\n      });\n    return;\n  };\n\n  return (\n    <div\n      className={classnames(\n        \"MapExplorer\",\n        { stickied: anchor === \"mapexplorer\" },\n        { hidden: anchor && anchor !== \"mapexplorer\" }\n      )}\n    >\n      {window.innerWidth > 769 && (\n        <div\n          className={classnames(\"anchor\", {\n            stickied: anchor === \"mapexplorer\",\n          })}\n          onClick={() => {\n            setAnchor(anchor === \"mapexplorer\" ? null : \"mapexplorer\");\n          }}\n        >\n          {/* <PinIcon /> */}\n        </div>\n      )}\n\n      {/* <div className=\"header\">\n        { currentView.view === MAP_TYPES.COUNTRY \n          ? <h6>\n            {t(\"{{action}} over a {{mapType}} for more details\", {\n              action: t(window.innerWidth <= 769 ? \"Tap\" : \"Hover\"),\n              mapType: t(\"Regional District\"),\n            })}\n          </h6>\n          : \"\"\n        }\n      </div> */}\n\n      {/* <LeftPanel \n        hoveredRegion={hoveredRegion}\n        hoveredData={hoveredData}\n        highlightedData={highlightedData}\n      /> */}\n      \n      {/* <div className=\"details-container-wrapper\">\n        <div className=\"details-container\">\n          <div className=\"meta\">\n            <h2\n              className={classnames(mapStatistic, {\n                [hoveredRegion?.zone]: currentMap.option === MAP_OPTIONS.HOTSPOTS,\n              })}\n            >\n              <div>\n                {t(\"From \")}\n                {t(hoveredRegion.name)}\n                {hoveredData.hoveredData.departure_SA22018_V1_NAME && hoveredData.hoveredData.departure_SA22018_V1_NAME.length ? \", \" : \"\"}\n                {t(hoveredData.hoveredData.departure_SA22018_V1_NAME)}\n                <div>\n                  {t(\"To \")}\n                  {hoveredData.hoveredDestination}\n                  {hoveredData.hoveredDestination.length \n                    ? \", \"\n                    : \"\"  \n                  }\n                  {hoveredData.hoveredData.destination_SA22018_V1_NAME}\n                </div>\n              </div>\n              \n              <div style={{alignSelf: \"center\"}}>\n                {!isNaN(Number(hoveredData.hoveredData.HAVERSINE_DISTANCE))\n                  ? Number(hoveredData.hoveredData.HAVERSINE_DISTANCE).toFixed(2) + \"km\"\n                  : \"\"\n                }\n              </div>\n            </h2>\n          </div>\n          <div className=\"map-stats\">\n            <div>\n              {Object.keys(highlightedData || {}).map((statistic, index) => (\n                <div key={index}>\n                  {statistic}\n                  ,\n                  {highlightedData[statistic]}\n                </div>\n                )\n              )\n              }\n            </div>\n            : <div>{currentMapStatistics.map((statistic, index) => (\n                <div\n                  key={statistic}\n                  className={classnames(\"stats\", statistic, {\n                    focused: statistic === mapStatistic,\n                  })}\n                  onClick={() => setMapStatistic(statistic)}\n                >\n                  <h5>{t(capitalize(statistic))}</h5>\n                  <div className=\"stats-bottom\">\n                    <animated.h1>\n                      {springs[index].total.interpolate((total) =>\n                        formatNumber(Math.floor(total))\n                      )}\n                    </animated.h1>\n                  </div>\n                </div>\n              ))}\n            </div>\n            }\n            \n          </div>\n        </div>\n      </div> */}\n\n      <div ref={mapExplorerRef}>\n        {mapStatistic && (\n          <Suspense\n            fallback={\n              <MapVisualizerLoader\n                className=\"map-loader\"\n                {...{\n                  width: mapExplorerRef.current?.clientWidth,\n                  statistic: mapStatistic, // the color to set for the loader\n                }}\n              />\n            }\n          >\n            <div className=\"main-wrapper\">\n              <LeftPanel \n                hoveredRegion={hoveredRegion}\n                hoveredData={hoveredData}\n                highlightedData={highlightedData}\n                centroidData={centroidData}\n                // allCentroidDestinations={allCentroidDestinations}\n                currentDestinationData={currentDestinationData}\n                clickedData={clickedData}\n                setClickedData={setClickedData}\n                mapRef={mapRef}\n              />\n\n              <div className=\"map-wrapper\">\n\n                <MapVisualizer\n                  currentMap={currentMap}\n                  data={data}\n                  regionalEducationData={regionalEducationData}\n                  regionalWorkData={regionalWorkData}\n                  regionalTotalData={regionalTotalData}\n                  centroidData={centroidData}\n                  setRegionalData={setRegionalData}\n                  currentView={currentView}\n                  setCurrentView={setCurrentView}\n                  changeMap={switchMap}\n                  regionHighlighted={regionHighlighted}\n                  setRegionHighlighted={setRegionHighlighted}\n                  setHighlightedData={setHighlightedData}\n                  setHoveredData={setHoveredData}\n                  statistic={mapStatistic}\n                  isCountryLoaded={isCountryLoaded}\n                  currentCommuteTypes={currentCommuteTypes}\n                  leafletMapRef={leafletMapRef}\n                  setCurrentDestinationData={setCurrentDestinationData}\n                  setClickedData={setClickedData}\n                  mapRef={mapRef}\n                />\n\n                <div className=\"tabs-container\">\n                  <div className=\"tabs-map\">\n                    {Object.values(MAP_OPTIONS).map((option) => (\n                      <div\n                        key={option}\n                        className={classnames(\"tab\", {\n                          focused: currentMap.option === option,\n                        })}\n                        onClick={() => handleTabClick(option)}\n                      >\n                        <h4 className={option}\n                          style={{\n                            color: COMMUTE_PURPOSE_COLOUR[option.toUpperCase()],\n                          }}\n                        >\n                          {t(option)}\n                          {/* {option === MAP_OPTIONS.EDUCATION && <sup>&dagger;</sup>} */}\n                        </h4>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                {/* <div className=\"info legend\">\n                {\n                  Object.keys(COMMUTE_PURPOSE_COLOUR).map((commutePurpose, index) => (\n                    <div key={index}>\n                      <i style={{\"background\": COMMUTE_PURPOSE_COLOUR[commutePurpose]}}></i>\n                      <span>{ commutePurpose }</span>\n                    </div>\n                  ))\n                }\n                </div> */}\n\n              </div>\n\n              <div className=\"commutes-wrapper\">\n                {Object.values(MODES_OF_TRANSPORT).map((commuteType, i)=>(\n                    <CommuteTab \n                      commuteType={commuteType} \n                      currentCommuteTypes={currentCommuteTypes}\n                      setCurrentCommuteTypes={setCurrentCommuteTypes}\n                      key={i} \n                    />\n                  ))\n                }\n              </div>\n\n            </div>\n\n          </Suspense>\n        )}\n      </div>\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.stateCode, currProps.stateCode)) {\n    return false;\n  } else if (!equal(prevProps.regionHighlighted, currProps.regionHighlighted)) {\n    return false;\n  } else if (!equal(prevProps.mapStatistic, currProps.mapStatistic)) {\n    return false;\n  } else if (!equal(prevProps.anchor, currProps.anchor)) {\n    return false;\n  } else if (\n    !equal(\n      prevProps.educationData?.NZ?.meta?.[\"last_updated\"],\n      currProps.educationData?.NZ?.meta?.[\"last_updated\"]\n    )\n  ) {\n    return false;\n  } else if (\n    !equal(\n      prevProps.educationData?.NZ?.total,\n      currProps.educationData?.NZ?.total\n    )\n  ) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(MapExplorer, isEqual);\n"],"sourceRoot":""}