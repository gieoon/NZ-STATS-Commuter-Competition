{"version":3,"sources":["constants.js","utils/commonFunctions.js","i18n/index.js","serviceWorker.js","index.js"],"names":["DISTRICT_CODES","MAP_STATISTICS","MAP_TYPES","COUNTRY","DISTRICT","MAP_OPTIONS","TOTAL","PER_MILLION","HOTSPOTS","NZ_ISO_SUFFIX","LOCALE_SHORTHANDS","english","D3_TRANSITION_DURATION","MAP_LEGEND_HEIGHT","ZONE_COLORS","Red","Orange","Green","COLORS","confirmed","active","recovered","deceased","tested","MAP_META","NZ","geoDataFile","mapType","graphObjectStates","graphObjectDistricts","UNKNOWN_DISTRICT_KEY","DISTRICT_NAMES","NORTHLAND","AUCKLAND","WAIKATO","BAY_OF_PLENTY","GISBORNE","HAWKES_BAY","TARANAKI","MANAWATU_WHANGANUI","WELLINGTON","TASMAN","NELSON","MARLBOROUGH","WEST_COAST","CANTERBURY","OTAGO","SOUTHLAND","DISTRICT_POPULATIONS_MIL","locale","isDevelopmentOrTest","formatLastUpdated","unformattedDate","then","localePackage","i18n","language","window","localStorage","i18nextLng","formatDistance","Date","formatDate","formatString","match","date","utcToZonedTime","format","formatNumber","value","numberFormatter","Intl","NumberFormat","maximumFractionDigits","isNaN","capitalize","s","charAt","toUpperCase","slice","capitalizeAll","str","toLowerCase","split","i","length","join","getStatistic","data","type","statistic","count","normalizer","migrated","fetcher","url","fetch","response","json","use","Backend","LanguageDetector","initReactI18next","init","debug","keySeparator","returnEmptyString","fallbackLng","load","backend","loadPath","addPath","saveMissing","interpolation","escapeValue","Boolean","location","hostname","App","lazy","ReactDOM","render","fallback","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fdd1f750.chunk.js","sourcesContent":["export const PRIMARY_STATISTICS = [\n    'confirmed',\n    'active',\n    'recovered',\n    'deceased',\n];\n\nconst districtCodesMap = {};\nexport const DISTRICT_CODES = districtCodesMap;\n\nexport const MAP_STATISTICS = [...PRIMARY_STATISTICS, 'tested'];\n\nexport const MAP_TYPES = {\n    COUNTRY: 0,\n    DISTRICT: 1,\n};\n\nexport const MAP_OPTIONS = {\n    TOTAL: 'Total',\n    PER_MILLION: 'Per million',\n    HOTSPOTS: 'Hotspots',\n};\n\n// ISO suffix of things.\nexport const NZ_ISO_SUFFIX = 'T00:00:00+12:00';\n\nexport const LOCALE_SHORTHANDS = {\n    english: 'en-US',   \n};\n\nexport const D3_TRANSITION_DURATION = 300;\n\nexport const MAP_LEGEND_HEIGHT = 50;\n\nexport const ZONE_COLORS = {\n    Red: '#d73027',\n    Orange: '#fee08b',\n    Green: '#66bd63',\n};\n\nexport const COLORS = {\n    confirmed: '#ff073a',\n    active: '#007bff',\n    recovered: '#28a745',\n    deceased: '#6c757d',\n    tested: '#4b1eaa',\n};\n\nexport const MAPS_DIR =\n  process.env.NODE_ENV === 'production' ? '/maps' : '/maps';\n\nexport const MAP_META = {\n    NZ: {\n        geoDataFile: `${MAPS_DIR}/new-zealand-districts.json`,\n        // geoDataFile: \"https://covid19india.org/maps/andhrapradesh.json\",\n        mapType: MAP_TYPES.COUNTRY,\n        graphObjectStates: 'NZL_adm2',\n        graphObjectDistricts: 'NZL_adm2',\n    }\n}\n\nexport const UNKNOWN_DISTRICT_KEY = 'Unknown';\n\nexport const DISTRICT_NAMES = {\n    NORTHLAND: 'Northland',\n    AUCKLAND: 'Auckland',\n    WAIKATO: 'Waikato',\n    BAY_OF_PLENTY: 'Bay of Plenty',\n    GISBORNE: 'Gisborne',\n    HAWKES_BAY: \"Hawke's bay\",\n    TARANAKI: 'Taranaki',\n    MANAWATU_WHANGANUI: 'Manawatu Whanganui',\n    WELLINGTON: 'Wellington',\n    TASMAN: 'Tasman',\n    NELSON: 'Nelson',\n    MARLBOROUGH: 'Marlborough',\n    WEST_COAST: 'West Coast',\n    CANTERBURY: 'Canterbury',\n    OTAGO: 'Otago',\n    SOUTHLAND: 'Southland',\n}\n\n// https://en.wikipedia.org/wiki/Regions_of_New_Zealand\nexport const DISTRICT_POPULATIONS_MIL = {\n    NORTHLAND: 188700,\n    AUCKLAND: 1642800,\n    WAIKATO: 482100,\n    BAY_OF_PLENTY: 324200,\n    GISBORNE: 49300,\n    HAWKES_BAY: 173700,\n    TARANAKI: 122700,\n    MANAWATU_WHANGANUI: 234500,\n    WELLINGTON: 527800,\n    TASMAN: 54800,\n    NELSON: 52900,\n    MARLBOROUGH: 49200,\n    WEST_COAST: 32600,\n    CANTERBURY: 628600,\n    OTAGO: 236200,\n    SOUTHLAND: 101200,\n}","import {NZ_ISO_SUFFIX, LOCALE_SHORTHANDS} from '../constants';\n\nimport {format, formatDistance, formatISO, subDays} from 'date-fns';\nimport {utcToZonedTime} from 'date-fns-tz';\nimport i18n from 'i18next';\n\nlet locale = null;\n\nconst getLocale = () => {\n  import('date-fns/locale/').then((localePackage) => {\n    locale =\n      localePackage[\n        LOCALE_SHORTHANDS[i18n.language || window.localStorage.i18nextLng]\n      ];\n  });\n};\n\nexport const isDevelopmentOrTest = () => {\n  if (process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test')\n    return true;\n  return false;\n};\n\nexport const getNZDate = () => {\n  return utcToZonedTime(new Date(), 'Auckland');\n};\n\nexport const getNZDateISO = () => {\n  return formatISO(getNZDate(), {representation: 'date'});\n};\n\nexport const getNZYesterdayISO = () => {\n  return formatISO(subDays(getNZDate(), 1), {representation: 'date'});\n};\n\nexport const formatLastUpdated = (unformattedDate) => {\n  getLocale();\n  return formatDistance(new Date(unformattedDate), new Date(), {\n    locale: locale,\n  });\n};\n\nexport const parseNZDate = (isoDate) => {\n  return new Date(isoDate + NZ_ISO_SUFFIX);\n};\n\nexport const formatDate = (unformattedDate, formatString) => {\n  if (\n    typeof unformattedDate === 'string' &&\n    unformattedDate.match(/^\\d{4}-([0]\\d|1[0-2])-([0-2]\\d|3[01])$/g)\n  )\n    unformattedDate += NZ_ISO_SUFFIX;\n  const date = utcToZonedTime(new Date(unformattedDate), 'Auckland');\n  return format(date, formatString, {\n    locale: locale,\n  });\n};\n\nexport function sliceTimeseriesFromEnd(timeseries, days) {\n  return timeseries.slice(-days);\n}\n\nexport const formatNumber = (value) => {\n  const numberFormatter = new Intl.NumberFormat('en-NZ', {\n    maximumFractionDigits: 2,\n  });\n  return isNaN(value) ? '-' : numberFormatter.format(value);\n};\n\nexport const capitalize = (s) => {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nexport const capitalizeAll = (s) => {\n  if (typeof s !== 'string') return '';\n  const str = s.toLowerCase().split(' ');\n  for (let i = 0; i < str.length; i++) {\n    str[i] = capitalize(str[i]);\n  }\n  return str.join(' ');\n};\n\nexport const abbreviate = (s) => {\n  return s.slice(0, 1) + s.slice(1).replace(/[aeiou]/gi, '');\n};\n\nexport const toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\nexport const getStatistic = (data, type, statistic, normalizer = 1) => {\n  let count;\n  if (statistic === 'active') {\n    const confirmed = data?.[type]?.confirmed || 0;\n    const deceased = data?.[type]?.deceased || 0;\n    const recovered = data?.[type]?.recovered || 0;\n    const migrated = data?.[type]?.migrated || 0;\n    count = confirmed - deceased - recovered - migrated;\n  } else {\n    count = data?.[type]?.[statistic] || 0;\n  }\n  return count / normalizer;\n};\n\nexport const fetcher = (url) => {\n  return fetch(url).then((response) => {\n    // console.log('got response: ', response.body.getReader());\n    return response.json();\n  });\n};\n","import {isDevelopmentOrTest} from '../utils/commonFunctions';\n\nimport i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport Backend from 'i18next-http-backend';\nimport {initReactI18next} from 'react-i18next';\n\nconst DEBUG = false;\n\ni18n\n  .use(Backend)\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    debug: isDevelopmentOrTest() && DEBUG,\n    keySeparator: false,\n    returnEmptyString: false,\n    fallbackLng: 'english',\n    load: 'languageOnly',\n    backend: {\n      loadPath: 'https://api.covid19india.org/locales/locale_{{lng}}.json',\n      addPath: 'http://localhost:9999/',\n    },\n    saveMissing: isDevelopmentOrTest() && DEBUG,\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n\nexport default i18n;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {lazy, Suspense} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './wdyr.js';\nimport './i18n';\nimport * as serviceWorker from './serviceWorker';\n\nconst App = lazy(() => import('./App' /* webpackChunkName: \"App\" */));\n\nReactDOM.render(\n    <Suspense fallback={<div />}>\n        <App />\n    </Suspense>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}