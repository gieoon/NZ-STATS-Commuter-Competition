{"version":3,"sources":["components/leafletMap.jsx","assets/right.svg","components/mapVisualizer.jsx"],"names":["commuteWorkCurves","commuteEducationCurves","global","LeafletMap","setHoveredData","setHighlightedData","currentMap","centroidData","currentCommuteTypes","history","setCurrentDestinationData","position","topLeft","L","latLng","bottomRight","useState","mapRef","useRef","left","top","right","bottom","setLastRequestedLatLng","commutePurpose","setCommutePurpose","lat","lng","setCurrentLatLng","initializing","setInitializing","location","useLocation","useEffect","control","scale","addTo","current","leafletElement","match","pathname","length","split","setView","updateData","option","toUpperCase","commuteType","clearDrawnObjectsCommute","off","on","map","bounds","getBounds","zoom","getZoom","API_zoneData","type","a","async","_northEast","_southWest","commuteTypes","commute_type","fetch","DATA_URL_ROOT","toLowerCase","then","d","json","data","updateCurvesCommute","catch","err","console","error","dataType","curvesToAdd","checkCurvesExistCommute","Object","keys","r","curve","createCurve","Number","departure_LONGITUDE","departure_LATITUDE","destination_LONGITUDE","destination_LATITUDE","id","newData","toAdd","toDelete","txt2Array","push","Array","from","document","getElementsByClassName","el","classList","remove","add","undefined","checkCurveMemorySize","values","lon1","lat1","lon2","lat2","obj","includes","COMMUTE_TYPE","lon","log","circleCenter","radius","COUNT","circle","weight","color","fillColor","fillOpacity","createStayAtHomeCircle","delta_x","delta_y","Math","sqrt","pow","theta","atan2","r2","cos","theta2","midpointX","midpointLatLng","sin","pathOptions","COMMUTE_METHOD_COLOUR","DB_2_COMMUTE_METHOD","opacity","e","this","setStyle","INITIAL_STROKE_WEIGHT","hoveredData","hoveredDestination","destination_SA22018_V1_NAME","SA2_name_usual_residence_address","to","SA2_name_workplace_address","popup","closeButton","setLatLng","latlng","setContent","DEPARTURE_NAME_1","DESTINATION_NAME_1","SA2_name_educational_address","HAVERSINE_DISTANCE","toFixed","key","key2CommuteType","TYPE","openOn","closePopup","_path","ref","center","zoomControl","maxBounds","latLngBounds","minZoom","maxZoom","layers","url","attribution","module","exports","getTotalStatistic","statistic","colorInterpolator","confirmed","t","interpolateReds","active","interpolateBlues","recovered","interpolateGreens","deceased","interpolateGreys","tested","interpolatePurples","MapVisualizer","regionalEducationData","regionalWorkData","regionalTotalData","setRegionalData","currentView","setCurrentView","changeMap","regionHighlighted","setRegionHighlighted","isCountryLoaded","svgRef","leafletMapRef","useTranslation","mapMeta","MAP_META","geoData","useSWR","geoDataFile","file","revalidateOnFocus","suspense","statisticMax","useMemo","districtCodes","filter","districtCode","view","MAP_TYPES","COUNTRY","max","MAP_OPTIONS","PER_MILLION","DISTRICT_POPULATIONS_MIL","districts","districtData","statisticTotal","code","mapScale","ZONES","scaleOrdinal","ZONE_COLORS","HOTSPOTS","scaleSqrt","clamp","nice","scaleSequential","topology","topojson","objects","graphObjectStates","graphObjectDistricts","svg","select","projection","geoMercator","fitSize","path","geoPath","features","DISTRICT","mapType","f","assign","properties","HASC_2","n","CITY_CODES","NAME_1","city","NAME_2","cityData","zone","strokeColor","initialFillColor","transition","duration","D3_TRANSITION_DURATION","onceTouchedRegion","selectAll","join","enter","sel","append","attr","REGION_STROKE_WIDTH","style","cityName","districtName","TOTAL","WORK","EDUCATION","getRegionalData","update","call","event","stopPropagation","x","y","k","centered","centroid","width","height","classed","districtClicked","text","district","capitalizeAll","forEach","Red","COLORS","MAP_STROKE_WIDTH","coordDepart","coordArrivee","coordinates","geoContains","MAP_CIRCLE_RADIUS","meshCountry","CITY_NAMES","each","highlighted","parentNode","appendChild","Fragment"],"mappings":"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","file":"static/js/MapVisualizer.37e51f9d.chunk.js","sourcesContent":["import React, {\n    useState, \n    useMemo, \n    useEffect, \n    useRef, \n    forwardRef,\n    useImperativeHandle // Child only exposes certain properties to parent.\n} from 'react';\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet';\nimport {useLocation} from 'react-router-dom';\nimport L, { circle } from 'leaflet';\nimport '@elfalem/leaflet-curve'\nimport './leaflet.scss'; // as opposed to .scss file which is CSS-like, or .sass which is considered SASS\nimport {\n    DATA_URL_ROOT,\n    COMMUTE_METHOD_COLOUR,\n    DB_2_COMMUTE_METHOD,\n} from '../constants';\nimport {\n    txt2Array\n} from '../utils/commonFunctions';\nimport arrow_right from '../assets/right.svg';\n// import { Curve } from 'react-leaflet-curve';\n\nconst MIN_ZOOM = 5;\nconst MAX_ZOOM = 18;\nconst INITIAL_STROKE_WEIGHT = 1;\nconst HIGHLIGHTED_STROKE_WEIGHT = INITIAL_STROKE_WEIGHT * 3.5;\nconst STROKE_COUNT_MULTIPLIER = 0.1;\nconst INITIAL_OPACITY = 0.35;\nconst OPACITY_MULTIPLIER = 0.01;\nconst HIGHLIGHTED_OPACITY = 1;\n\nconst curvesWork = {}, \n    curvesEducation = {},\n    commuteWorkCurves = {},\n    commuteEducationCurves = {};\n\n// Allows for console debugging by calling >> curves in Chrome\nglobal.commuteWorkCurves = commuteWorkCurves; \nglobal.commuteEducationCurves = commuteEducationCurves;\n\n//forwardRef(\n    function LeafletMap({\n    setHoveredData,\n    setHighlightedData,\n    centroidData,\n    currentMap,\n    history,\n    currentCommuteTypes,\n    setCurrentDestinationData,\n}){\n    // Center of New Zealand\n    // const position = [173.299, -41.273]\n    const position = [-41.273, 173.299]\n    const topLeft = L.latLng(-31.154944, 150.138842); //162\n    const bottomRight = L.latLng(-49.285522, 191.794907); // 179\n\n    // const [curvesWork, setCurvesWork] = useState({});\n    // const [curvesEducation, setCurvesEducation] = useState({});\n\n    const [circles, setCircles] = useState([]);\n\n    // const mapRef = React.createRef();\n    const mapRef = useRef(null);\n\n    const isInitialMount = useRef(true);\n\n    // Need to save this because it becomes null after updates\n    const [m, setMap] = useState();\n\n    // The variables that we last requested from server, only request again if these have changed\n    const [lastRequestedLatLng, setLastRequestedLatLng] = useState({\n       left: 0,//162.138842,\n       top: 0,//-31.15494,\n       right: 0,//179.794907,\n       bottom: 0,//-49.285522, \n    });\n\n    // Data for zoom & boundary\n    const [workZoneData, setWorkZoneData] = useState([]);\n\n    const [educationZoneData, setEducationZoneData] = useState([]);\n\n    const [commutePurpose, setCommutePurpose] = useState(\"TOTAL\");\n\n    const [currentLatLng, setCurrentLatLng] = useState({\n        lat: position[0],\n        lng: position[1],\n    })\n\n    // Circle highlighting current selection on the map\n    const [currentPositionCircle, setCurrentPositionCircle] = useState(null);\n\n    const [initializing, setInitializing] = useState(true);\n\n    const location = useLocation();\n\n    // useImperativeHandle(ref, () => {\n    //     return {\n    //         updateData: updateData()\n    //     }\n    // });\n\n    // componentDidMount\n    useEffect(()=>{\n        L.control.scale().addTo(mapRef.current.leafletElement);\n    },[])\n\n    // useEffect(()=>{\n    //     if(isInitialMount.current)\n    //         isInitialMount.current = false;\n    //     else {\n    //         // console.log('update data called');\n    //         updateData();\n    //     }\n    //     console.log(currentCommuteTypes)\n    // }, [currentCommuteTypes])\n\n    useEffect(()=>{\n        // console.log(\"Location updated: \", location);\n        var reg = /[\\-0-9.]+\\/[\\-0-9.]+$/;\n        var match = location.pathname.match(reg);\n        if(match && match.length){\n            var lat = match[0].split('/')[0];\n            var lng = match[0].split('/')[1];\n            // console.log(lat, lng);\n            setCurrentLatLng({\n                lat: lat,\n                lng: lng\n            });\n            // Zoom into this location, but not the first time\n            if(!initializing){\n                mapRef.current.leafletElement.setView([lat,lng], 12); //9\n                // var circle = createCurrentLatLngCircle(lat, lng);\n                // setCurrentPositionCircle(circle);\n                // console.log('update data called');\n                updateData();\n            }\n            setInitializing(false);\n        }\n    }, [location])\n\n    useEffect(() => {\n        setCommutePurpose(currentMap.option.toUpperCase());\n        mapRef.current.leafletElement.commuteType = currentMap.option.toUpperCase();\n        /*\n        clearDrawnObjects(\n            currentMap.option.toUpperCase() === \"WORK\"\n            ? curvesEducation\n            : curvesWork,\n            currentMap.option.toUpperCase() === \"WORK\"\n            ? \"EDUCATION\"\n            : \"WORK\"\n        );\n        */\n       clearDrawnObjectsCommute(\n           currentMap.option.toUpperCase() === \"WORK\"\n           ? commuteEducationCurves\n           : commuteWorkCurves,\n           currentMap.option.toUpperCase() === \"WORK\"\n           ? \"EDUCATION\"\n           : \"WORK\"\n       )\n    }, [\n        currentMap.option,\n    ])\n\n    useEffect(() => {\n        // Listen when bounds change so we can load different data\n        // Disable current listeners\n        mapRef.current.leafletElement.off('movestart');\n        mapRef.current.leafletElement.on('movestart', updateData);\n\n        // mapRef.current.leafletElement.off('viewreset');\n        // mapRef.current.leafletElement.on('viewreset', updateData);\n\n        mapRef.current.leafletElement.off('zoomstart');\n        mapRef.current.leafletElement.on('zoomstart', updateData);\n        // console.log('update data called');\n        updateData();\n        \n    },[\n        commutePurpose,\n        currentCommuteTypes\n    ])\n\n    const updateData = () => {\n        const map = mapRef.current.leafletElement;\n        var bounds = map.getBounds();\n        var zoom = map.getZoom();\n        // console.log('requesting data with zoom: ', zoom);\n        // If total, request both data types\n        // Can also do if !== education, request work, if !== work, request education, so total will request both.\n        if(commutePurpose === \"TOTAL\"){\n            API_zoneData(bounds, zoom, \"EDUCATION\");\n            API_zoneData(bounds, zoom, \"WORK\");\n        } else {\n            // Otherwise just search directly\n            API_zoneData(bounds, zoom, commutePurpose);\n        }\n\n        // Circle information\n        //TODO add this back in\n        /*\n        for(var c of centroidData[zoom]){\n            createCircle(c.departure_LATITUDE, c.departure_LONGITUDE, c.cluster_count);\n        }\n        */\n    }\n\n    const commuteType2Key = (commute_type) => {\n        if(commute_type === \"Stay home\")\n            return \"home\"\n        else if(commute_type === \"Drive own vehicle\")\n            return \"own_vehicle\"\n        else if(commute_type === \"Passenger in vehicle\")\n            return \"passenger\"\n        else if(commute_type === \"Train\")\n            return \"train\"\n        else if(commute_type === \"Bicycle\")\n            return \"bicycle\"\n        else if(commute_type === \"Walk or jog\")\n            return \"walk_or_jog\"\n        else if(commute_type === \"Bus\")\n            return \"bus\"\n        else if(commute_type === \"Ferry\")\n            return \"ferry\"\n        else if(commute_type === \"Ferry\" || commute_type === \"Other\")\n            return \"other\";\n        else\n            return commute_type\n    }\n\n    const key2CommuteType = (key) => {\n        switch(key){\n            case \"STAY_HOME\": return \"Working/Studying from Home\";\n            case \"DRIVE_OWN_VEHICLE\": return \"Driving own vehicle\";\n            case \"PASSENGER_IN_VEHICLE\": return \"Passenger in vehicle (car/truck/van)\";\n            case \"TRAIN\": return \"Train\";\n            case \"BICYCLE\": return \"Bicycle\";\n            case \"WALK_OR_JOG\": return \"Walking/Jogging\";\n            case \"BUS\": return \"Bus\";\n            case \"FERRY\": return \"Ferry\";\n            case \"OTHER\": return \"Other\";\n            default: return \"Other\";\n        }\n    }\n\n    const API_zoneData = async (bounds, zoom, type) => {\n        // console.log('requesting data with type: ', type);\n        // if(\n        //        lastRequestedLatLng.top      !== bounds._northEast.lat\n        //     && lastRequestedLatLng.bottom   !== bounds._southWest.lat\n        //     && lastRequestedLatLng.left     !== bounds._southWest.lng\n        //     && lastRequestedLatLng.right    !== bounds._northEast.lng\n        // ){\n            setLastRequestedLatLng({\n                top: bounds._northEast.lat,\n                bottom: bounds._southWest.lat,\n                left: bounds._southWest.lng,\n                right: bounds._northEast.lng,\n            });\n            var commuteTypes = \"\";\n            for(var commuteType of currentCommuteTypes){\n                commuteTypes += \"&commute_type=\" + commuteType2Key(commuteType);\n            }\n\n            // console.log(\"currentCommuteTypes: \", currentCommuteTypes)\n            // Request new data\n            fetch(\n                DATA_URL_ROOT + `/zoneData?left=${bounds._southWest.lng}&top=${bounds._northEast.lat}&right=${bounds._northEast.lng}&bottom=${bounds._southWest.lat}&zoom=${zoom}&data_type=${type.toLowerCase()}${commuteTypes}`,\n            ).then(async (d)=>{\n                const data = await d.json();\n                // console.log(data);\n                if(type === \"WORK\"){\n                    // setWorkZoneData(data);\n                    updateCurvesCommute(data, \"WORK\");\n                }\n                if(type === \"EDUCATION\"){\n                    // setEducationZoneData(data);\n                    updateCurvesCommute(data, \"EDUCATION\");\n                }\n            })\n            .catch(err => {\n                console.error(\"Error fetching data: \", err);\n            })\n        // }\n    }\n\n    const updateCurvesCommute = (d, dataType) => {\n        if(!d) return;\n        var curvesToAdd = checkCurvesExistCommute(d, dataType);\n        for(var commuteType of Object.keys(curvesToAdd)){\n            for(var r of curvesToAdd[commuteType]){\n                const curve = createCurve(\n                    Number(r.departure_LONGITUDE), \n                    Number(r.departure_LATITUDE), \n                    Number(r.destination_LONGITUDE), \n                    Number(r.destination_LATITUDE),\n                    r,\n                    dataType\n                );\n                if(dataType === \"WORK\"){\n                    if(!commuteWorkCurves[commuteType])\n                        commuteWorkCurves[commuteType] = {};\n                    commuteWorkCurves[commuteType][r.id] = curve;\n                }\n                else if(dataType === \"EDUCATION\"){\n                    if(!commuteEducationCurves[commuteType])\n                        commuteEducationCurves[commuteType] = {};\n                    commuteEducationCurves[commuteType][r.id] = curve;\n                }\n            }\n        }\n    }\n\n    const updateCurves = (d, dataType) =>{\n        if(!d) return;\n        var curvesToAdd = checkCurvesExist(d, dataType); //checkCurvesExist(d, dataType);\n        for(var r of curvesToAdd){\n            const curve = createCurve(\n                Number(r.departure_LONGITUDE), \n                Number(r.departure_LATITUDE), \n                Number(r.destination_LONGITUDE), \n                Number(r.destination_LATITUDE),\n                r,\n                dataType\n            );\n            if(dataType === \"WORK\"){\n                curvesWork[r.id] = curve;\n            }\n            else if(dataType === \"EDUCATION\"){\n                curvesEducation[r.id] = curve;\n            }\n        }\n    }\n\n    const checkCurvesExistCommute = (newData, dataType) => {\n        var toAdd = {};\n        // What is actually drawn on the screen right now\n        const toDelete = dataType === \"WORK\" \n        ? commuteWorkCurves : commuteEducationCurves;\n        \n        // console.log(\"newData: \", newData);\n        // global.newData = newData;\n        // console.log(\"newData: \", Object.keys(newData));\n        for(var commuteType of Object.keys(newData)){\n            // console.log('handling commuteType: ', commuteType, newData[commuteType]);\n            toAdd[commuteType] = [];\n            var d = txt2Array(newData[commuteType])\n            // console.log(commuteType, d);\n            for(var r of d){\n                // If new curve is not in existing curves, add it to list of new curves\n                if(!toDelete[r.id]){\n                    toAdd[commuteType].push(r);\n                }\n            }\n    \n        }\n        clearDrawnObjectsCommute(toDelete, dataType);\n\n        return toAdd;\n    }\n\n    // Checks if the curve is already drawn on the map, if it is, exclude it.\n    // Returns the new curves to add to the map\n    const checkCurvesExist = (newData, dataType) => {\n        // Dictionary of row id;\n        var toAdd = [];\n        const toDelete = (dataType === \"WORK\" \n            ? curvesWork : curvesEducation);\n\n        // If the new curve is not in the existing curves, remove it.\n\n        for(var r of newData){\n            // If new curve is not in existing curves, add it to list of new curves\n            if(!toDelete[r.id]){\n                toAdd.push(r);\n            }\n            // If new curve is in existing curves, it means it is already drawn, \n            // delete it from the toRemove dictionary\n            if(toDelete[r.id]){\n                // toDelete[r.id] = undefined;\n                // delete toDelete[r.id];\n            }\n            // If commute purpose is education, and key starts with 'E'\n            // Delete until proven otherwise.\n            // if((dataType === \"EDUCATION\" && commutePurpose !== \"TOTAL\") && r.id.substring(0,1) === 'W'){\n                // toDelete[r.id] = undefined;\n                // delete toDelete[r.id];\n            // }\n            // if((dataType === \"WORK\" && commutePurpose !== \"TOTAL\") && r.id.substring(0, 1) === 'E') {\n                // toDelete[r.id] = undefined;\n                // delete toDelete[r.id];\n            // }\n            \n            // Otherwise leave it in the array to be removed as it no longer should be drawn\n        }\n\n        // console.log(\"actually removing: \", Object.keys(toDelete).length);\n\n        // clearDrawnObjects(toDelete, dataType);\n\n        return toAdd;\n    }\n    \n    const clearDrawnObjectsCommute = (toDelete, dataType) => {\n        \n        for(var commuteType of Object.keys(toDelete)){\n            \n            for(var id of Object.keys(toDelete[commuteType])){\n                for(var el of Array.from(document.getElementsByClassName(id))){\n                    if(el){\n                        // console.log('removing curve from DOM');\n                        el.classList.remove('pathFadeIn');\n                        el.classList.add('pathFadeOut');\n                        // Wait for animation to expire and remove from DOM\n                        el.remove();\n                    }\n                }\n                if(dataType === \"WORK\"){\n                    // console.log(\"removing curve from memory\");\n                    commuteWorkCurves[commuteType][id].remove();\n                    commuteWorkCurves[commuteType][id] = undefined;\n                    delete commuteWorkCurves[commuteType][id];\n                }\n                else if(dataType === \"EDUCATION\"){\n                    // console.log(\"removing curve from memory\");\n                    commuteEducationCurves[commuteType][id].remove();\n                    commuteEducationCurves[commuteType][id] = undefined;\n                    delete commuteEducationCurves[commuteType][id];\n                }\n            }\n        }\n\n        checkCurveMemorySize();\n        \n    }\n\n    // Disable on production\n    const checkCurveMemorySize = () => {\n        var totalWork = 0, totalEducation = 0;\n        for(var commuteType of Object.values(commuteWorkCurves)){\n            totalWork += Object.keys(commuteType).length;\n        }\n        for(var commuteType of Object.values(commuteEducationCurves)){\n            totalEducation += Object.keys(commuteType).length;\n        }\n        // console.log(\"total work: \", totalWork)\n        // console.log(\"total education: \", totalEducation);\n    }\n\n    /*\n    const clearDrawnObjects = (toDelete, dataType) => {\n        // console.log(\"deleting data: \", Object.keys(toDelete).length);\n        // console.log(curvesWork);\n        // console.log(curvesEducation);\n        for(var id of Object.keys(toDelete)){\n            // var el = document.getElementById(id);\n            for(var el of Array.from(document.getElementsByClassName(id))){\n                if(el){\n                    el.classList.remove('pathFadeIn');\n                    el.classList.add('pathFadeOut');\n                    // Wait for animation to expire and remove from DOM\n                    el.remove();\n                }\n            }\n            if(dataType === \"WORK\"){\n                curvesWork[id].remove();\n                curvesWork[id] = undefined;\n                delete curvesWork[id];\n            }\n            else if(dataType === \"EDUCATION\"){\n                curvesEducation[id].remove();\n                curvesEducation[id] = undefined;\n                delete curvesEducation[id];\n            }\n        };\n\n        // toRemove = {};\n        // var c = curves;\n        // c.length = 0;\n        // console.log(\"current curves: \", curves);\n        // setCurves(curves);\n\n        circles.forEach(circle => {\n            circle.remove();\n        })\n        var ci = circles;\n        ci.length = 0;\n        setCircles(ci);\n    }\n    */\n\n    const createStayAtHomeCircle = (lat, lon, obj) => {\n        console.log('creating stay at home data');\n        var circleCenter = [lat, lon];\n        var options = {\n            weight: 1.5,\n            color: '#f54242',\n            fillColor: '#f54242',\n            fillOpacity: 0.35,\n        }\n        var radius = Number(obj.COUNT) * 3.25 + 250;\n\n        const circle = L.circle(circleCenter, radius, options)\n            .addTo(mapRef.current.leafletElement);\n        return circle;\n    }\n\n    // Draw cluster circles.\n    const createCircle = (lat, lon, clusterCount) => {\n        var circleCenter = [lat, lon];\n        var options = {\n            weight: 1.5,\n            color: 'rgba(255,0,0,0)',//'rgba(255,0,0,.35)',\n            fillColor: '#f03',\n            fillOpacity: 0.35,\n        }\n\n        // Radius dependent on number of commutes in this circle.\n        var radius = clusterCount * 3.25 + 2500;\n\n        const circle = L.circle(circleCenter, radius, options)\n            .addTo(mapRef.current.leafletElement);\n        circles.push(circle);\n    }  \n    \n    const createCurrentLatLngCircle = () => {\n        if(currentPositionCircle !== null)\n            currentPositionCircle.remove();\n\n        var circleCenter = [currentLatLng.lat, currentLatLng.lng];\n        var options = {\n            weight: 1.5,\n            color: 'rgba(0,0,255,.5)',\n            fillColor: '#f03',\n            fillOpacity: 0.35,\n        }\n\n        // Radius dependent on number of commutes in this circle.\n        var radius = 2500;\n\n        var circle = L.circle(circleCenter, radius, options)\n            .addTo(mapRef.current.leafletElement);\n        return circle;\n    }\n\n    const createCurve = (lon1, lat1, lon2, lat2, obj, dataType) => {\n        // Draw a circle if it is stay at home\n        // console.log(obj.COMMUTE_TYPE);\n        if(['STUDY_AT_HOME','WORK_AT_HOME'].includes(obj.COMMUTE_TYPE)){\n            return createStayAtHomeCircle(lat1, lon1, obj);\n        }\n\n        const points = [];\n        var delta_x = lon2 - lon1,\n            delta_y = lat2 - lat1;\n        \n        var r = Math.sqrt(Math.pow(delta_x, 2) + Math.pow(delta_y, 2)),\n        theta = Math.atan2(delta_y, delta_x);\n\n        var thetaOffset = (3.14 / 10);\n\n        var r2 = (r / 2) / (Math.cos(thetaOffset)),\n        theta2 = theta + thetaOffset;\n\n        var midpointX = (r2 * Math.cos(theta2)) + lon1,\n            midpointY = (r2 * Math.sin(theta2)) + lat1;\n\n        var midpointLatLng = [midpointY, midpointX];\n\n        points.push([lon1, lat1], midpointLatLng, [lon2, lat2]);\n\n        var pathOptions = {\n            // color: dataType === \"WORK\" \n            //     ? COMMUTE_PURPOSE_COLOUR.WORK \n            //     : COMMUTE_PURPOSE_COLOUR.EDUCATION,\n            color: COMMUTE_METHOD_COLOUR[DB_2_COMMUTE_METHOD[obj.COMMUTE_TYPE]],\n            weight: INITIAL_STROKE_WEIGHT + (Number(obj.COUNT) * STROKE_COUNT_MULTIPLIER),\n            opacity: INITIAL_OPACITY + (Number(obj.COUNT) * OPACITY_MULTIPLIER),\n        }\n\n        // const map = L.map('sampleMap')\n\n        const curve = L.curve([\n            'M',\n            //[lon1, lat1],\n            [lat1, lon1],\n            'Q',\n            midpointLatLng,\n            [lat2, lon2]//[lon2, lat2]\n        ], pathOptions)\n        .on('mouseover', function(e) {\n            // console.log('mouseover: ', obj)\n            this.setStyle({\n                weight: HIGHLIGHTED_STROKE_WEIGHT + (Number(obj.COUNT) * STROKE_COUNT_MULTIPLIER),\n                opacity: HIGHLIGHTED_OPACITY,\n            })\n            setHoveredData({\n                hoveredData: obj,\n                hoveredDestination: obj.destination_SA22018_V1_NAME//f.properties.NAME_1\n            });\n            setCurrentDestinationData({\n                from: obj.SA2_name_usual_residence_address,\n                to: obj.SA2_name_workplace_address\n            })\n            setHighlightedData(obj)\n            // console.log(obj)\n            L.popup({\n                closeButton: false,\n            })\n                .setLatLng(e.latlng) \n                .setContent(\n                    '<p><b>' + obj.DEPARTURE_NAME_1 + ', ' + obj.SA2_name_usual_residence_address\n                    + ' → '//' > ' //<img src={arrow_right} alt=\"\" /> \n                    + obj.DESTINATION_NAME_1 + ', ' + (obj.SA2_name_workplace_address || obj.SA2_name_educational_address) + '</p>'\n                    + '<p>' + Number(obj.HAVERSINE_DISTANCE).toFixed(2) + 'km</p></b>'\n                    + '<hr/>'\n                    + '<div style=\"display:flex;justify-content:space-between;\"><div><b>' + obj.COUNT + '</b> people ' + '</div><div><span class=\"' + obj.COMMUTE_TYPE + '\">' + key2CommuteType(obj.COMMUTE_TYPE) + '</span></div></div>'\n                    + '<p>Commuting for <b>' + obj.TYPE.toLowerCase() + '</b></p>' //obj.TYPE.charAt(0) + obj.TYPE.substring(1).toLowerCase() + \n                )\n                .openOn(mapRef.current.leafletElement);\n\n        })\n        .on('mouseout', function() {\n            this.setStyle({\n                weight: INITIAL_STROKE_WEIGHT + (Number(obj.COUNT) * STROKE_COUNT_MULTIPLIER),\n                opacity: INITIAL_OPACITY + (Number(obj.COUNT) * OPACITY_MULTIPLIER),\n            })\n            mapRef.current.leafletElement.closePopup();\n        })\n        //.addTo(mapRef.current.leafletElement)\n        .addTo(mapRef.current.leafletElement)\n        // console.log(curve._path);\n        // curve._path.id = obj.id;\n        curve._path.classList.add(obj.id);\n        curve._path.classList.add('pathFadeIn');\n        // curves.push(curve);\n        // console.log(mapRef.current.leafletElement)\n        return curve;  \n    }\n    \n    //TODO get curves based on zoom level\n    const removeCurves = () => {\n\n    }\n\n    const addCurves = () => {\n\n    }\n\n    /*\n    const pathOne = [\n        'M', [50.14874640066278, 14.106445312500002],\n        'Q', [51.67255514839676, 16.303710937500004],\n        [50.14874640066278, 18.676757812500004],\n        'T', [49.866316729538674, 25.0927734375]\n    ]\n    */\n\n    return(\n        <Map\n            ref={mapRef}\n            center={position} \n            zoom={MIN_ZOOM}  //13\n            zoomControl={true}\n            maxBounds={L.latLngBounds(topLeft, bottomRight)}\n            minZoom={5}\n            maxZoom={MAX_ZOOM}\n            layers={[]}\n\n            // setPath={createCurve(170.138842, -31.154944, 179.794907, -49.285522)}\n        >\n            {/* {console.log(\"mapRef.current \", mapRef.current)} */}\n            <TileLayer\n                // This defines what kind of tiles we want, and the type of the map\n                // url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                url=\"https://api.maptiler.com/maps/basic/{z}/{x}/{y}.png?key=9Ada5vIEJbJjNQrKmV7i\"\n                //attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n                // url=\"http://tile.stamen.com/terrain/{z}/{x}/{y}.jpg\"\n                // url=\"http://tile.stamen.com/watercolor/{z}/{x}/{y}.jpg\"\n                // url=\"http://b.tile.openstreetmap.fr/hot/${z}/${x}/${y}.png\"\n                // WHEN USING HTTPS\n                // url=\"https://stamen-tiles.a.ssl.fastly.net/watercolor/{z}/{x}/{y}.jpg\"\n                // url=\"http://tile.stamen.com/toner/{z}/{x}/{y}.png\"\n                // attribution='Map tiles by <a href=\"http://stamen.com\" style=\"pointer-events: initial;\">Stamen Design</a>, under <a href=\"http://creativecommons.org/licenses/by/3.0\" style=\"pointer-events: initial;\">CC BY 3.0</a>. Data by <a href=\"http://openstreetmap.org\" style=\"pointer-events: initial;\">OpenStreetMap</a>, under <a href=\"http://www.openstreetmap.org/copyright\" style=\"pointer-events: initial;\">ODbL</a>.'\n                attribution='<a href=\"https://www.maptiler.com/copyright/\" target=\"_blank\">&copy; MapTiler</a> <a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">&copy; OpenStreetMap contributors</a>'\n            />\n            \n        </Map>\n    );\n}\n//)\n\nexport default LeafletMap;\n\n\n{/* <Marker position={position}>\n                    <Popup>A pretty CSS3 popup.<br />Easily customizable.</Popup>\n                </Marker> */}\n\n                {/* <Curve positions={pathOne} option={{color:'red',fill:true}}/> */}\n\n\n// setDataType(\"TOTAL\");\n// console.log(mapRef.current.leafletElement)\n// if(!m){\n//     // console.log(\"assigning map: \", mapRef.current.leafletElement)\n//     setMap(mapRef.current.leafletElement);\n// }\n\n        \n\n/*\nvar legend = L.control()//({ position: \"topright\" });\nlegend.onAdd = function(map){\n    var div = L.DomUtil.create('div', 'info legend');\n\n    for (var commutePurpose of Object.keys(COMMUTE_PURPOSE_COLOUR)){\n        div.innerHTML += \n            '<i style=\"background:' + COMMUTE_PURPOSE_COLOUR[commutePurpose] + '\"></i> ' + \n            '<span>' + commutePurpose + '</span>';\n    }\n    return div;\n}\nlegend.addTo(mapRef.current.leafletElement);\n*/\n\n/*\nvar bounds = mapRef.current.leafletElement.getBounds();\nconsole.log(bounds)\n// Load initial data\nconst zoom = mapRef.current.leafletElement.getZoom();\n// const dataType = currentMap.option.toUpperCase();\n// If total, request both data types\nif(commutePurpose === \"TOTAL\"){\n    API_zoneData(bounds, zoom, \"EDUCATION\");\n    API_zoneData(bounds, zoom, \"WORK\");\n} else {\n    // Otherwise just search directly\n    API_zoneData(bounds, zoom, commutePurpose);\n}\n*/\n\n/*\n{\n    {\n    _northEast: {\n        lat: lastRequestedLatLng.top, \n        lng: lastRequestedLatLng.right\n    },\n    _southWest: {\n        lat: lastRequestedLatLng.bottom, \n        lng: lastRequestedLatLng.left\n    }\n}\n*/\n// mapRef.current.leafletElement.commuteType = \"TOTAL\";\n\n// If incoming data is work, and row is education, then ignore it.\n        // if(commutePurpose === \"TOTAL\"){\n        //     Object.keys(toDelete).forEach((id)=>{\n        //         if(id.substring(0,1) !== dataType.substring(0,1)){\n        //             toDelete[id] = undefined;\n        //             delete toDelete[id];\n        //         }\n        //     })\n        // } \n        // else if(dataType === \"EDUCATION\" && commutePurpose === \"TOTAL\"){\n        //     Object.keys(toDelete).forEach((id)=>{\n        //         console.log(id)\n        //         if(id.substring(0,1) === 'W'){\n        //             toDelete[id] = undefined;\n        //             delete toDelete[id];\n        //         }\n        //     })\n        // }","module.exports = __webpack_public_path__ + \"static/media/right.0aea0b24.svg\";","import React, { useEffect, useState, useMemo, useRef } from \"react\";\nimport useSWR from \"swr\";\nimport { json } from \"d3-fetch\";\nimport { scaleOrdinal, scaleSqrt, scaleSequential } from \"d3-scale\";\nimport {\n  interpolateReds,\n  interpolateBlues,\n  interpolateGreens,\n  interpolateGreys,\n  interpolatePurples,\n} from \"d3-scale-chromatic\";\nimport { max } from \"d3-array\";\nimport { select, event, selectAll } from \"d3-selection\";\nimport { geoMercator, geoPath, geoContains } from \"d3-geo\";\nimport { transition } from \"d3-transition\";\nimport { useTranslation } from \"react-i18next\";\nimport * as topojson from \"topojson\";\nimport * as Icon from \"react-feather\";\nimport {\n  DATA_URL_ROOT,\n  MAP_META,\n  D3_TRANSITION_DURATION,\n  MAP_TYPES,\n  MAP_STROKE_WIDTH,\n  MAP_STROKE_WIDTH_HIGHLIGHTED,\n  MAP_CIRCLE_RADIUS,\n  REGION_STROKE_WIDTH,\n  MAP_OPTIONS,\n  ZONE_COLORS,\n  DISTRICT_POPULATIONS_MIL,\n  CITY_CODES,\n  CITY_NAMES,\n  COLORS,\n  UNKNOWN_DISTRICT_KEY,\n} from \"../constants\";\nimport {\n  capitalizeAll,\n  formatNumber,\n  getStatistic,\n} from \"../utils/commonFunctions\";\nimport { CodeSquareIcon } from \"@primer/octicons-v2-react\";\nimport LeafletMap from './leafletMap';\n\nconst [width, height] = [432, 488];\n\n//TODO create a separate value for this (district value)\nconst getTotalStatistic = (data, statistic, normalizer = 1) => {\n  return \"0\";//getStatistic(data, \"total\", statistic, normalizer);\n};\n\nconst colorInterpolator = {\n  confirmed: (t) => interpolateReds(t * 0.85),\n  active: (t) => interpolateBlues(t * 0.85),\n  recovered: (t) => interpolateGreens(t * 0.85),\n  deceased: (t) => interpolateGreys(t * 0.85),\n  tested: (t) => interpolatePurples(t * 0.85),\n};\n\nfunction MapVisualizer({\n  currentMap,\n  data,\n  regionalEducationData,\n  regionalWorkData,\n  regionalTotalData,\n  centroidData,\n  setRegionalData,\n  currentView,\n  setCurrentView,\n  changeMap,\n  regionHighlighted,\n  setRegionHighlighted,\n  setHoveredData,\n  setHighlightedData,\n  statistic,\n  isCountryLoaded,\n  currentCommuteTypes,\n  setCurrentDestinationData,\n  leafletMapRef,\n}) {\n  const { t } = useTranslation();\n  const svgRef = useRef(null);\n\n  const mapMeta = MAP_META['NZ'];\n\n  // Load topoJSON file\n  const { data: geoData } = useSWR(\n    mapMeta.geoDataFile,\n    async (file) => {\n      return await json(file);\n    },\n    { revalidateOnFocus: false, suspense: true }\n  );\n\n  // console.log(\"currentMap.option: \", currentMap.option);\n\n  // console.log(data);\n\n  //TODO this needs to be dependent on the tab that is currently showing.\n  const statisticMax = useMemo(() => {\n    const districtCodes = Object.keys(data).filter(\n      (districtCode) =>\n        districtCode !== \"NZ\" && Object.keys(MAP_META).includes(districtCode)\n    );\n    return currentMap.view === MAP_TYPES.COUNTRY\n      ? max(districtCodes, (districtCode) =>\n          getTotalStatistic(\n            data[districtCode],\n            statistic,\n            //TODO get the number of entries and total of all combined for this district.\n            // This can be hardcoded as an API endpoint.\n            currentMap.option === MAP_OPTIONS.PER_MILLION\n              ? DISTRICT_POPULATIONS_MIL[districtCode]\n              : 1\n          )\n        )\n      : max(districtCodes, (districtCode) =>\n          data[districtCode]?.districts\n            ? max(Object.values(data[districtCode].districts), (districtData) =>\n                getTotalStatistic(districtData, statistic)\n              )\n            : 0\n        );\n  }, [data, currentMap.option, currentMap.view, statistic]);\n\n  const statisticTotal = useMemo(() => {\n    return getTotalStatistic(\n      data[currentMap.code],\n      statistic,\n      currentMap.option === MAP_OPTIONS.PER_MILLION\n        ? DISTRICT_POPULATIONS_MIL[currentMap.code]\n        : 1\n    );\n  }, [data, currentMap.code, currentMap.option, statistic]);\n\n  const mapScale = useMemo(() => {\n    // console.log(currentMap.option);\n    if (currentMap.option === MAP_OPTIONS.ZONES) {\n      return scaleOrdinal(Object.keys(ZONE_COLORS), Object.values(ZONE_COLORS));\n    } else if (currentMap.option === MAP_OPTIONS.HOTSPOTS) {\n      return scaleSqrt([0, Math.max(statisticMax, 1)], [0, 40])\n        .clamp(true)\n        .nice(3);\n    } else {\n      return scaleSequential(\n        [0, Math.max(1, statisticMax)],\n        colorInterpolator[statistic]\n      ).clamp(true);\n    }\n  }, [currentMap.option, statistic, statisticMax]);\n\n  useEffect(()=>{\n    // setupDataframe(); // Only use this to create the initial dataframe\n  }, []);\n\n  useEffect(() => {\n    const topology = topojson.feature(\n      geoData,\n      geoData.objects[mapMeta.graphObjectStates || mapMeta.graphObjectDistricts]\n    );\n\n    const svg = select(svgRef.current);\n\n    const projection = geoMercator().fitSize([width, height], topology);\n    const path = geoPath(projection);\n\n    let features =\n      currentMap.view === MAP_TYPES.DISTRICT\n        ? topojson.feature(geoData, geoData.objects[mapMeta.graphObjectStates])\n            .features\n        : mapMeta.mapType === MAP_TYPES.COUNTRY &&\n          currentMap.option === MAP_OPTIONS.HOTSPOTS\n        ? [\n            ...topojson.feature(\n              geoData,\n              geoData.objects[mapMeta.graphObjectStates]\n            ).features,\n            ...topojson.feature(\n              geoData,\n              geoData.objects[mapMeta.graphObjectDistricts]\n            ).features,\n          ]\n        : topojson.feature(\n            geoData,\n            geoData.objects[mapMeta.graphObjectDistricts]\n          ).features;\n\n    // Add id to each feature\n    // var str = \"\"; // This is used to create the CITY_NAMES dictionary under ../constants\n    features = features.map((f) => {\n      // str += `${f.properties.NAME_2}: \"${f.properties.NAME_2}\",\\n`\n      const obj = Object.assign({}, f);\n      obj.id = `${currentMap.code}-${f.properties.HASC_2}`; //`${currentMap.code}-${state}${district ? \"-\" + district : \"\"}`;\n      return obj;\n    });\n\n    // console.log(str)\n\n    const fillColor = (d) => {\n      const districtCode = CITY_CODES[d.properties.NAME_1];\n      const city = d.properties.NAME_2;\n      const districtData = data[districtCode];\n      const cityData = districtData?.districts?.[city];\n      let n;\n      if (currentMap.option === MAP_OPTIONS.HOTSPOTS) {\n        n = cityData?.zone || 0;\n      } else {\n        if (city) n = getTotalStatistic(cityData, statistic);\n        else\n          n = getTotalStatistic(\n            districtData,\n            statistic,\n            currentMap.option === MAP_OPTIONS.PER_MILLION\n              ? DISTRICT_POPULATIONS_MIL[districtCode]\n              : 1\n          );\n      }\n      const color = n === 0 ? \"#ffffff00\" : mapScale(n);\n\n      return color;\n    };\n\n    const strokeColor = (d) => {\n      return '#000000'; //'#c3c9c8' //'#d2d6d5'; //'#6c757d91'; //'#000000'; //TODO remove this;\n      return currentMap.option === MAP_OPTIONS.ZONES\n        ? \"#343a40\"\n        : COLORS[statistic];\n    };\n\n    const initialFillColor = (d) => {\n      return \"#ffffff00\"; //'#c3c9c8';\n    };\n\n    // takes in d.properties.NAME_2\n    const getRegionalData = (districtName) => {\n      // console.log(currentMap.option, regionalTotalData)\n      switch(currentMap.option){\n        case(MAP_OPTIONS.TOTAL): return (regionalTotalData || {})[districtName];\n        case(MAP_OPTIONS.WORK): return (regionalWorkData || {})[districtName];\n        case(MAP_OPTIONS.EDUCATION): return (regionalEducationData || {})[districtName];\n        default: return (regionalTotalData || {})[districtName];\n      }\n    }\n\n    const districtClicked = (d) => {\n      var x, y, k;\n      var centered = null;\n      \n      // console.log('district clicked: ', width, height, path.centroid(d));\n\n      if(d && centered !== d){\n        var centroid = path.centroid(d);\n        x = centroid[0];\n        y = centroid[1];\n        k = 9; //4 //12\n        centered = d;\n      } else {\n        x = width / 2;\n        y = height / 2;\n        k = 1;\n        centered = null;\n      }\n      // console.log('x: ', x, \"y: \", y, centroid);\n  \n      svg.selectAll('path')\n        .classed(\"active\", centered && function(d) { return d === centered; });\n      \n      svg.transition()\n        .duration(D3_TRANSITION_DURATION)\n        .attr(\"transform\", \"translate(\" + width * (k/2) + \",\" + height * (k/2.15) + \")scale(\" + k + \")translate(\" + -x + \",\" + -y + \")\")\n        // .style(\"stroke-width\", 1.5 / k + \"px\");\n        // .style(\"stroke-width\", 0.125 + \"rem\");\n    }\n\n    /* Draw map */\n    const t = transition().duration(D3_TRANSITION_DURATION);\n    let onceTouchedRegion = null;\n    const regionSelection = svg\n      .select(\".regions\")\n      .selectAll(\"path\")\n      .data(\n        currentMap.option !== MAP_OPTIONS.HOTSPOTS ? features : [],\n        (d) => d.id\n      )\n      .join(\n        (enter) => {\n          const sel = enter\n            .append(\"path\")\n            .attr(\"d\", path)\n            .attr(\"stroke-width\", REGION_STROKE_WIDTH) //1.8 //1\n            .attr(\"stroke-opacity\", 0) //0 //1\n            // .attr('fill', \"#ff0000\")\n            // .attr('fill-opacity', 1)\n            .style(\"cursor\", \"pointer\")\n            .on(\"mouseenter\", (d) => {\n              // console.log(currentMap.option, currentMap.option === MAP_OPTIONS.TOTAL)\n              setRegionHighlighted({\n                districtCode: CITY_CODES[d.properties.NAME_2], // Unique on city names\n                cityName: d.properties.NAME_2,\n              });\n              setRegionalData(getRegionalData(d.properties.NAME_2))\n            })\n            .on(\"mouseleave\", (d) => {\n              if (onceTouchedRegion === d) onceTouchedRegion = null;\n            })\n            .on(\"touchstart\", (d) => {\n              if (onceTouchedRegion === d) onceTouchedRegion = null;\n              else onceTouchedRegion = d;\n            })\n            .attr(\"fill\", initialFillColor)\n            // .attr('fill', fillColor)\n            .attr(\"stroke\", strokeColor);\n          sel.append(\"title\");\n          return sel;\n        },\n        (update) =>\n          update.call((update) =>\n            // console.log('updating!!: '),\n            update\n              .transition(t)\n              .attr(\"fill\", fillColor)\n              .attr(\"stroke\", strokeColor)\n          )\n      )\n      .attr(\"pointer-events\", \"all\")\n      .on(\"click\", (d) => {\n        // Setting state here causes interpolation to pause.\n        setCurrentView({\n          view: MAP_TYPES.DISTRICT\n        });\n\n        event.stopPropagation();\n        const districtCode = CITY_CODES[d.properties.NAME_2];\n        // Zoom in on the map\n        districtClicked(d);\n        if (\n          onceTouchedRegion ||\n          mapMeta.mapType === MAP_TYPES.COUNTRY ||\n          !data[districtCode]?.NAME_2\n        )\n          return;\n        // Disable pointer events till the new map is rendered\n        svg.attr(\"pointer-events\", \"none\");\n        svg.select(\".regions\").selectAll(\"path\").attr(\"pointer-events\", \"none\");\n        // Switch map\n        // changeMap(CITY_CODES[d.properties.NAME_1]);\n\n      });\n\n    regionSelection.select(\"title\").text((d) => {\n      if (currentMap.option === MAP_OPTIONS.TOTAL) {\n        const district = d.properties.NAME_1;\n        const districtCode = CITY_CODES[district];\n        const city = d.properties.NAME_2;\n        const districtData = data[districtCode];\n        const cityData = districtData?.city?.[city];\n        let n;\n        if (city) n = getTotalStatistic(cityData, statistic);\n        else n = getTotalStatistic(districtData, statistic);\n        return (\n          // formatNumber(100 * (n / (statisticTotal || 0.001))) +\n          // \"% from \" +\n          capitalizeAll(city ? city : district)\n        );\n      }\n    });\n\n    svg\n      .transition()\n      .duration(mapMeta.mapType === MAP_TYPES.DISTRICT ? t.duration() / 2 : 0)\n      .on(\"end\", () =>\n        svg.attr(\n          \"class\",\n          currentMap.option === MAP_OPTIONS.HOTSPOTS ? \"zone\" : \"\"\n        )\n      );\n\n    /* ------- START OF Commute Lines -------- */\n\n    // CLear existing data\n    svg.selectAll('path.route').remove();\n    svg.selectAll(\"circle.pin\").remove();\n\n    //For each key\n    Object.keys(data).forEach((key) => {\n      // console.log(key);\n      const color = \n        key === \"workMapData\" \n        ? ZONE_COLORS.Red\n        : COLORS.active;\n\n      svg.selectAll('.routes')\n        .data(data[key]) // [] // to debug // data\n        .enter()\n        .append('path')\n          .attr('class', 'route')\n          .attr('cursor', 'pointer')\n          .attr('fill-opacity', 0.5)\n          .attr(\"stroke\", color) //TODO get stroke Color, which sets based on work or education\n          .attr(\"stroke-width\", MAP_STROKE_WIDTH) //.15\n          .attr(\"fill\", color)\n          .attr('d', function (d) {\n            var coordDepart = [d.departure_LONGITUDE, d.departure_LATITUDE];\n            var coordArrivee = [d.destination_LONGITUDE, d.destination_LATITUDE];\n            return path({\n              type: 'LineString',\n              coordinates: [\n                coordDepart,\n                coordArrivee\n              ]\n            });\n          })\n          // .attr(\"pointer-events\", \"all\")\n          // .on(\"click\", (d) => {\n          .on(\"mouseenter\", (d) => {\n            // console.log('path hovered: ', d);\n            \n            const features = topojson.feature(\n              geoData,\n              geoData.objects[mapMeta.graphObjectDistricts]\n            ).features;\n            // features.some() <= this function is good, but only returns boolean.\n            for(var f of features){\n              if(geoContains(\n                f, \n                [d.destination_LONGITUDE, d.destination_LATITUDE]\n              )){\n                // console.log(f)\n                setHoveredData({\n                  hoveredData: d,\n                  hoveredDestination: f.properties.NAME_1\n                });\n                break;\n              }\n            }\n            //TODO highlighted change stroke width\n            // console.log(\"Make this highlighting work!!! \", d);\n            // const highlighted = true; //d.id === select(this).id;\n            // if (highlighted) this.parentNode.appendChild(this);\n            // select(this).style('stroke-width', highlighted ? MAP_STROKE_WIDTH_HIGHLIGHTED : REGION_STROKE_WIDTH);\n          });\n    });\n\n      // Add circles to each end\n    Object.keys(data).forEach((key) => { \n      const color = \n        key === \"workMapData\" \n        ? ZONE_COLORS.Red\n        : COLORS.active;\n\n      svg\n        .selectAll(\".pin\")\n        .data(data[key])\n        .enter()\n        .append(\"circle\", \".pin\")\n          .on(\"mouseenter\", (d) => {\n            console.log('circle hovered: ', d);\n            setHoveredData({\n              hoveredData: d,\n              hoveredDestination: \"\",\n            })\n          })\n          .attr('class', 'pin')\n          .attr('cursor', 'pointer')\n          .attr(\"r\", MAP_CIRCLE_RADIUS) //.35 //.15\n          .attr(\"fill\", color)\n          .attr(\"transform\", function (d) {\n            return (\n              \"translate(\" +\n              projection([d.departure_LONGITUDE, d.departure_LATITUDE]) +\n              \")\"\n            );\n          })\n      \n    })\n\n\n    /* ------ END OF Commute Lines ------- */\n\n    let meshCountry = [];\n    if (mapMeta.mapType === MAP_TYPES.COUNTRY) {\n      meshCountry = [\n        topojson.mesh(geoData, geoData.objects[mapMeta.graphObjectStates]),\n      ];\n      meshCountry[0].id = mapMeta.graphObjectStates;\n    }\n    let meshDistricts = [];\n    if (currentMap.view === MAP_TYPES.DISTRICT) {\n      // Add id to mesh\n      meshDistricts = [\n        topojson.mesh(geoData, geoData.objects[mapMeta.graphObjectDistricts]),\n      ];\n      meshDistricts[0].id = mapMeta.graphObjectDistricts;\n    }\n\n    svg\n      .select(\n        // currentMap.view === MAP_TYPES.COUNTRY\n        //   ? '.state-borders'\n        //   : '.district-borders'\n        \".state-borders\"\n        // '.district-borders'\n      )\n      .attr(\"fill\", 'none') //\"none\"\n      .attr(\"stroke-width\", function () {\n        return (\n          // mapMeta.mapType === MAP_TYPES.COUNTRY\n          // console.log(currentView.view),\n          // currentView.view === MAP_TYPES.COUNTRY\n          // currentMap.view === MAP_TYPES.DISTRICT\n          // ? 0\n          // : 1.5;\n          // Make this thinner when zoomed in.\n          // ? 1\n          // : .1\n          currentView.view === MAP_TYPES.COUNTRY\n          ? .25 \n          : .15\n        );\n      })\n      .selectAll(\"path\")\n      .data(\n        //currentMap.view === MAP_TYPES.COUNTRY ? meshStates : meshDistricts,\n        meshCountry,\n        // meshDistricts,\n        (d) => d.id\n      )\n      .join((enter) => enter.append(\"path\").attr(\"d\", path))\n      .transition(t)\n      .attr(\"stroke\", () => {\n        if (currentMap.option === MAP_OPTIONS.ZONES) {\n          return \"#00000060\";\n        } else {\n          return COLORS[statistic] + \"30\";\n        }\n      });\n\n    // console.log(currentMap.view === MAP_TYPES.COUNTRY);\n    svg\n      .select(\n        //currentMap.view === MAP_TYPES.COUNTRY\n        //  ? '.district-borders'\n        //  : '.state-borders'\n        \".state-borders\"\n        // '.district-borders'\n      )\n      .selectAll(\"path\")\n      .data(\n        //currentMap.view === MAP_TYPES.COUNTRY ? meshDistricts : meshStates,\n        meshCountry,\n        // meshDistricts,\n        (d) => d.id\n      )\n      .join((enter) =>\n        enter\n          .append(\"path\")\n          .attr(\"d\", path)\n          .attr(\"fill\", \"none\") //\"none\"\n          .attr(\"stroke-width\", .05/* .15 // 1.5*/)\n      )\n      .transition(t)\n      .attr(\"stroke\", \"#343a4050\");\n\n    // Reset on tapping outside map\n    svg.attr(\"pointer-events\", \"auto\").on(\"click\", () => {\n      if (mapMeta.mapType !== MAP_TYPES.COUNTRY) {\n        setRegionHighlighted({\n          districtCode: \"NZ\",\n          cityName: null,\n        });\n      }\n    });\n\n    // console.log(\"regionHighlighted.cityName: \", regionHighlighted.cityName);\n    // const regionalData = getRegionalData(regionHighlighted.cityName)\n\n  }, [\n    geoData,\n    data,\n    // regionalData,\n    mapMeta,\n    currentMap,\n    setRegionHighlighted,\n    changeMap,\n    isCountryLoaded,\n    mapScale,\n    statistic,\n    statisticTotal,\n  ]);\n\n  useEffect(() => {\n    // console.log(regionHighlighted);\n    const district = CITY_NAMES[regionHighlighted.districtCode];\n    const city = regionHighlighted.cityName;\n    \n    const svg = select(svgRef.current);\n    // if (currentMap.option === MAP_OPTIONS.HOTSPOTS) {\n    //   svg\n    //     .select('.circles')\n    //     .selectAll('circle')\n    //     .attr('fill-opacity', (d) => {\n    //       const highlighted =\n    //         state === d.properties.st_nm &&\n    //         (!district ||\n    //           district === d.properties?.district ||\n    //           (district === UNKNOWN_DISTRICT_KEY && !d.properties.district));\n    //       return highlighted ? 1 : 0.5;\n    //     });\n    // } else {\n      svg\n        .select('.regions')\n        .selectAll('path')\n        .each(function (d) {\n          // console.log('highlighting: ', d);\n          /*\n          const highlighted =\n            district === d.properties.NAME_1 &&\n            (currentMap.view === MAP_TYPES.COUNTRY ||\n              city === d.properties?.NAME_2);\n          */\n          const highlighted =\n            city === d.properties.NAME_2;\n          /*\n          console.log(\n            'highlighted: ', highlighted, \n            // \"currentMap.view: \", currentMap.view,\n            // \"currentMap.view === MAP_TYPES.COUNTRY: \", \n            // currentMap.view === MAP_TYPES.COUNTRY,\n            \"district: \", district,\n            \"d.properties.NAME_1: \", d.properties.NAME_1,\n            \"city: \", city,\n            \"d.properties?.NAME_2: \", d.properties?.NAME_2\n          );\n          */\n          if (highlighted) this.parentNode.appendChild(this);\n          select(this).attr('stroke-opacity', highlighted ? 1 : 0);\n          select(this).attr('fill-opacity', highlighted ? .95 : 0);\n          select(this).attr('fill', highlighted ? '#000000' : 0);\n        });\n    // }\n  }, [\n    geoData,\n    data,\n    currentMap.option,\n    currentMap.view,\n    regionHighlighted.districtCode,\n    regionHighlighted.cityName,\n    statistic,\n  ]);\n\n  // Add NAME_1, NAME_2 to each departure and destination\n  const setupDataframe = () => {\n    // TODO remove this after running once\n    // POST request to /setup to create the dataframe\n    // 1. Create the data first\n    const work_departures= [];\n    const work_destinations= [];\n    const education_departures= [];\n    const education_destinations= [];\n    // NAME_1 for region location\n    const work_departures_DISTRICT = [];\n    const work_destinations_DISTRICT = [];\n    const education_departures_DISTRICT = [];\n    const education_destinations_DISTRICT = [];\n\n    const features = topojson.feature(\n      geoData,\n      geoData.objects[mapMeta.graphObjectDistricts]\n    ).features;\n\n    var b = false;\n\n    // console.log(data.educationMapData.length);\n    // console.log(data.workMapData.length);\n    for(var r of data.educationMapData){\n      b = false;\n      for(var f of features){\n        if(geoContains(f, [r.departure_LONGITUDE, r.departure_LATITUDE])){\n          education_departures.push(f.properties.NAME_2)\n          education_departures_DISTRICT.push(f.properties.NAME_1)\n          console.log(\"found feature education_departures\");\n          b = true;\n          break;\n        }\n      }\n      if(!b) {\n        education_departures.push(\"\");\n        education_departures_DISTRICT.push(\"\");\n      }\n    }\n\n    for(var r of data.educationMapData){\n      b = false;\n      for(var f of features){\n        if(geoContains(f, [r.destination_LONGITUDE, r.destination_LATITUDE])){\n          education_destinations.push(f.properties.NAME_2) //NAME_1\n          education_destinations_DISTRICT.push(f.properties.NAME_1)\n          console.log('found feature education_destinations')\n          b = true;\n          break;\n        }\n      }\n      if(!b) {\n        education_destinations.push(\"\");\n        education_destinations_DISTRICT.push(\"\");\n      }\n    }\n\n    for(var r of data.workMapData){\n      b = false;\n      for(var f of features){\n        if(geoContains(f, [r.departure_LONGITUDE, r.departure_LATITUDE])){\n          work_departures.push(f.properties.NAME_2) //NAME_1\n          work_departures_DISTRICT.push(f.properties.NAME_1)\n          console.log('found feature work_departures')\n          b = true;\n          break;\n        }\n      }\n      if(!b) {\n        work_departures.push(\"\");\n        work_departures_DISTRICT.push(\"\");\n      }\n    }\n\n    for(var r of data.workMapData){\n      b = false;\n      for(var f of features){\n        if(geoContains(f, [r.destination_LONGITUDE, r.destination_LATITUDE])){\n          work_destinations.push(f.properties.NAME_2) //NAME_1\n          work_destinations_DISTRICT.push(f.properties.NAME_1);\n          console.log(\"found feature work_destinations\")\n          b = true;\n          break;\n        }\n      }\n      if(!b) {\n        work_destinations.push(\"\");\n        work_destinations_DISTRICT.push(\"\");\n      }\n    }\n    console.log(work_departures.length, work_destinations.length, education_departures.length, education_destinations.length)\n  \n    fetch(DATA_URL_ROOT + \"/setup\", {\n      method: 'POST',\n      mode: 'no-cors',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      // credentials: 'same-origin',\n      body: JSON.stringify({\n        work_departures: work_departures,\n        work_destinations: work_destinations,\n        education_departures: education_departures,\n        education_destinations: education_destinations,\n        work_departures_DISTRICT: work_departures_DISTRICT,\n        work_destinations_DISTRICT: work_destinations_DISTRICT,\n        education_departures_DISTRICT: education_departures_DISTRICT,\n        education_destinations_DISTRICT: education_destinations_DISTRICT,\n      })\n    }).then(()=>{console.log('sent /setup SUCCESS')})\n    .catch((err) =>{console.error(\"Error sending request: \", err)})\n    \n  }\n\n  return (\n    <React.Fragment>\n      <LeafletMap \n        setHoveredData={setHoveredData}\n        setHighlightedData={setHighlightedData}\n        currentMap={currentMap}\n        centroidData={centroidData}\n        currentCommuteTypes={currentCommuteTypes}\n        setCurrentDestinationData={setCurrentDestinationData}\n        // ref={leafletMapRef} // Can use ref on React.forwardRef components\n      />\n      {/* <div className=\"svg-parent\">\n        <svg\n          id=\"chart\"\n          viewBox={`0 0 ${width} ${height}`}\n          preserveAspectRatio=\"xMidYMid meet\"\n          ref={svgRef}\n        >\n          <g className=\"regions\" />\n          <g className=\"state-borders\" />\n          {currentMap.view === MAP_TYPES.COUNTRY && (\n            <g className=\"district-borders\" />\n          )}\n          {currentMap.option === MAP_OPTIONS.HOTSPOTS && (\n            <g className=\"circles\" />\n          )}\n        </svg>\n    \n        {mapMeta.mapType === MAP_TYPES.DISTRICT &&\n          !!getTotalStatistic(\n            data[currentMap.code]?.districts?.[UNKNOWN_DISTRICT_KEY],\n            statistic\n          ) && (\n            <div className=\"disclaimer\">\n              <Icon.AlertCircle />\n              {t(\"District-wise {{statistic}} numbers need reconciliation\", {\n                statistic: t(statistic),\n              })}\n            </div>\n          )}\n      </div> */}\n\n      {/* {mapScale && (\n            <MapLegend\n                data={data}\n                mapScale={mapScale}\n                mapOption={currentMap.option}\n                statistic={statistic}\n            />\n            )} */}\n\n      {/* <svg style={{ position: \"absolute\", height: 0 }}>\n        <defs>\n          <filter id=\"balance-color\" colorInterpolationFilters=\"sRGB\">\n            <feColorMatrix\n              type=\"matrix\"\n              values=\"0.91372549  0           0            0  0.08627451\n                            0           0.91372549  0            0  0.08627451\n                            0           0           0.854901961  0  0.145098039\n                            0           0           0            1  0\"\n            />\n          </filter>\n        </defs>\n      </svg> */}\n    </React.Fragment>\n  );\n}\n\nexport default MapVisualizer;\n\n// Top of map is probably Three Kings Islands\n    // const top = -34.154944; // Latitude\n    // const topLongitude = 172.138113;\n    // Bottom of map is bottom of Stewart Island\n    // const bottom = -47.285522; // Latitude\n    // const bottomLongitude = 167.490438;\n    // const right = 179.794907;\n    // const left = 164.138842;\n\n    /*\n    const circlesData = [\n      {\n        name: \"Auckland\",\n        location: {\n          latitude: -36.89981,\n          longitude: 174.537433,\n        },\n      },\n      {\n        name: \"Canterbury\",\n        location: {\n          latitude: -43.57914,\n          longitude: 172.355433,\n        },\n      },\n    ];\n    */\n\n    // console.log(data);\n\n    /*\n        const linesData = [\n          {\n            type: \"LineString\",\n            coordinates: [\n              [174.537433, -36.899810],\n              [172.355433, -43.579140]\n            ]\n          }\n        ]\n        */\n    \n    // const linesData = [\n    //   {\n    //     departure: [174.537433 /* Longitude */, -36.89981 /* Latitude */],\n    //     destination: [172.355433, -43.57914],\n    //   },\n    // ];\n    \n    /*\n        var arcs = svg.append(\"g\")\n          .attr(\"class\",\"arcs\");\n\n        // http://bl.ocks.org/mhkeller/f41cceac3e7ed969eaeb\n        const lngLatToArc = (d, bend) => {\n          bend = bend || 1;\n          const from = d['departure'];\n          const to = d['destination'];\n\n          var sourceXY = projection(from),\n\t\t\t\t\ttargetXY = projection(to);\n\n          var sourceX = sourceXY[0],\n              sourceY = sourceXY[1];\n\n          var targetX = targetXY[0],\n              targetY = targetXY[1];\n\n          var dx = targetX - sourceX,\n              dy = targetY - sourceY,\n              dr = Math.sqrt(dx * dx + dy * dy)*bend;\n\n          console.log(dx, dy, dr);\n\n          // To avoid a whirlpool effect, make the bend direction consistent regardless of whether the source is east or west of the target\n          var west_of_source = (targetX - sourceX) < 0;\n          if (west_of_source) return \"M\" + targetX + \",\" + targetY + \"A\" + dr + \",\" + dr + \" 0 0,1 \" + sourceX + \",\" + sourceY;\n          return \"M\" + sourceX + \",\" + sourceY + \"A\" + dr + \",\" + dr + \" 0 0,1 \" + targetX + \",\" + targetY;\n        }\n        \n        svg.selectAll(\"path\")\n          .data(linesData)\n          .enter()\n          .append(\"path\")\n          .attr('d', (d) => lngLatToArc(d, 5));\n*/\n\n    /*\n        svg.selectAll(\"line\")\n          .data(linesData)\n          .enter()\n          .append(\"line\")\n          .attr('fill-opacity', 0.5)\n          .attr(\"stroke\", \"#ff0000\")\n          .attr(\"stroke-width\", 5)\n          .attr(\"fill\", \"#ff0000\")\n          .attr(\"x1\", d=>projection(d.departure)[0])\n          .attr(\"y1\", d=>projection(d.departure)[1])\n          .attr(\"x2\", d=>projection(d.destination)[0])\n          .attr(\"y2\", d=>projection(d.destination)[1])\n*/\n/*\n        svg.selectAll('.route')\n          .data(linesData)\n          .enter()\n          .append('path')\n            .attr('fill-opacity', 0.5)\n            .attr(\"stroke\", \"#007bff\")\n            .attr(\"stroke-width\", 3)\n            .attr(\"fill\", \"#007bff\")\n            .attr('d', function (d) {\n              var coordDepart = d.departure;\n              var coordArrivee = d.destination;\n              return path({\n                type: 'LineString',\n                coordinates: [\n                  coordDepart,\n                  coordArrivee\n                ]\n              });\n            })\n*/\n/*\n    // 1. Get the longitude & latitude\n    // 2. Find the midpoint\n    // 3. Add 20 to x, and reduce y by 20, this creates a slightly off-center point.\n    // 4. Draw a d3.curve on these three points.\n    // var lineGenerator = d3.line().curve(d3.curveCardinal);\n\n    const linesData2 = [\n      {\n        departure: [174.537433, -36.89981],\n        intermediate: [173, -40],\n        destination: [172.355433, -43.57914],\n      },\n    ];\n\n    svg\n      .selectAll(\"curve\")\n      // .attr('d', curve(linesData))\n      .data(linesData2)\n      .enter()\n      .append(\"path\")\n      // .append('curve')\n      .attr(\"fill-opacity\", 0.5)\n      .attr(\"stroke\", \"#007bff\")\n      .attr(\"stroke-width\", 3)\n      .attr(\"fill\", \"#007bff\")\n      .attr(\"x1\", (d) => projection(d.departure)[0])\n      .attr(\"y1\", (d) => projection(d.departure)[1])\n      // .attr(\"x2\", d=>projection(d.intermediate)[0])\n      // .attr(\"y2\", d=>projection(d.intermediate)[1])\n      .attr(\"x2\", (d) => projection(d.destination)[0])\n      .attr(\"y2\", (d) => projection(d.destination)[1]);\n*/\n\n    // Plot an example point\n    /*\n    svg\n      .selectAll(\".pin\")\n      .data(circlesData)\n      .enter()\n      .append(\"circle\", \".pin\")\n      .attr(\"r\", 4)\n      .attr(\"fill\", \"#007bff\")\n      .attr(\"transform\", function (d) {\n        return (\n          \"translate(\" +\n          projection([d.location.longitude, d.location.latitude]) +\n          \")\"\n        );\n      });\n    */\n    /*\n        svg\n          .select('.circles')\n          .selectAll('circle')\n          .data(circlesData, (d) => d.id)\n          .join((enter) => \n              enter\n                .append('circle')\n                .attr('transform', (d) => `translate(${path.centroid(d)})`)\n                .attr('fill-opacity', 0.5)\n            .style('cursor', 'pointer')\n            .attr('pointer-events', 'all')\n            .on('mouseenter', (d) => {\n              setRegionHighlighted({\n                stateCode: CITY_CODES[d.id],\n                districtName: d.properties.NAME_1 || UNKNOWN_DISTRICT_KEY,\n              });\n            })\n            .on('click', () => {\n              event.stopPropagation();\n            })\n          )\n          .transition(t)\n          .attr('fill', COLORS[statistic] + '70')\n          .attr('stroke', COLORS[statistic] + '70')\n          .attr('r', (d) => mapScale(d.value)\n        );\n        */"],"sourceRoot":""}