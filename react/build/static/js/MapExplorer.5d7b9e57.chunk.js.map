{"version":3,"sources":["components/loaders/mapVisualizer.jsx","components/mapExplorer.jsx"],"names":["MapVisualizerLoader","width","statistic","windowWidth","window","innerWidth","mapHeight","height","MAP_LEGEND_HEIGHT","viewBox","speed","backgroundColor","COLORS","cx","cy","r","MapVisualizer","lazy","React","memo","stateCode","education_data","regionHighlighted","setRegionHighlighted","anchor","setAnchor","mapStatistic","setMapStatistic","isCountryLoaded","t","useTranslation","history","useHistory","mapExplorerRef","useRef","useState","code","view","MAP_TYPES","COUNTRY","option","MAP_META","mapType","MAP_OPTIONS","HOTSPOTS","TOTAL","currentMap","setCurrentMap","console","log","currentMapMeta","currentMapData","useEffect","districtName","PER_MILLION","STATE","ZONES","DISTRICTS","switchMap","useCallback","newMapMeta","districts","topDistrict","Object","keys","sort","a","b","getStatistic","ReactDOM","unstable_batchedUpdates","panelState","useMemo","stateData","produce","draft","state","DISTRICT_NAMES","hoveredRegion","hoveredData","name","population_millions","DISTRICT_POPULATIONS_MIL","springs","useSprings","MAP_STATISTICS","length","map","total","delta","from","config","tension","clamp","className","classnames","stickied","hidden","onClick","action","index","key","focused","capitalize","h1","interpolate","formatNumber","Math","floor","h6","tested","date","formatDate","meta","href","source","target","push","formatLastUpdated","zone","UNKNOWN_DISTRICT_KEY","ref","fallback","current","clientWidth","data","changeMap","values","handleTabClick","style","color","prevProps","currProps","equal","NZ"],"mappings":"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","file":"static/js/MapExplorer.5d7b9e57.chunk.js","sourcesContent":["import {COLORS, MAP_LEGEND_HEIGHT} from '../../constants';\n\nimport React from 'react';\nimport ContentLoader from 'react-content-loader';\n\n// Margins as declared in CSS\nexport const MAP_BUFFER_MARGINS = 42;\nexport const INDIA_ASPECT_RATIO = 0.885;\n\nconst MapVisualizerLoader = ({width, statistic}) => {\n  const windowWidth = window.innerWidth;\n  // Default width for loader\n  if (!width) width = windowWidth > 769 ? 480 : windowWidth;\n  // From CSS\n  const scalingFactor = windowWidth > 769 ? 0.9 : 1;\n  const mapHeight = (scalingFactor * width) / INDIA_ASPECT_RATIO;\n  const height = MAP_BUFFER_MARGINS + MAP_LEGEND_HEIGHT + mapHeight;\n  return (\n    <ContentLoader\n      viewBox={`0 0 ${width} ${height}`}\n      height={height}\n      width={width}\n      speed={2}\n      backgroundColor={COLORS[statistic]}\n    >\n      <circle cx={0.4 * width} cy={height / 2} r=\"5\" />\n      <circle cx={0.5 * width} cy={height / 2} r=\"5\" />\n      <circle cx={0.6 * width} cy={height / 2} r=\"5\" />\n    </ContentLoader>\n  );\n};\n\nexport default MapVisualizerLoader;\n","import MapVisualizerLoader from './loaders/mapVisualizer';\n\nimport {\n  MAP_META,\n  MAP_OPTIONS,\n  MAP_STATISTICS,\n  MAP_TYPES,\n  DISTRICT_NAMES,\n  UNKNOWN_DISTRICT_KEY,\n  DISTRICT_POPULATIONS_MIL\n} from '../constants';\nimport {\n  capitalize,\n  formatNumber,\n  formatDate,\n  formatLastUpdated,\n  getStatistic,\n} from '../utils/commonFunctions';\n\nimport {PinIcon} from '@primer/octicons-v2-react';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport produce from 'immer';\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  Suspense,\n  lazy,\n} from 'react';\nimport ReactDOM from 'react-dom';\nimport * as Icon from 'react-feather';\nimport {useTranslation} from 'react-i18next';\nimport {useHistory} from 'react-router-dom';\nimport {useSprings, animated} from 'react-spring';\n\nconst MapVisualizer = lazy(() =>\n  import('./mapVisualizer' /* webpackChunkName: \"MapVisualizer\" */)\n);\n\nfunction MapExplorer({\n  stateCode,\n  education_data,\n  //work_education_data,\n  regionHighlighted,\n  setRegionHighlighted,\n  anchor,\n  setAnchor,\n  mapStatistic,\n  setMapStatistic,\n  isCountryLoaded = true,\n}) {\n  const {t} = useTranslation();\n  const history = useHistory();\n\n  const mapExplorerRef = useRef();\n\n  const [currentMap, setCurrentMap] = useState({\n    code: stateCode,\n    view: MAP_TYPES.COUNTRY,\n    option:\n      MAP_META[stateCode].mapType === MAP_TYPES.COUNTRY\n        ? MAP_OPTIONS.HOTSPOTS\n        : MAP_OPTIONS.TOTAL,\n  });\n  console.log(MAP_META)\n  const currentMapMeta = MAP_META[currentMap.code];\n\n  const currentMapData =\n    currentMapMeta.mapType === MAP_TYPES.COUNTRY\n      ? education_data\n      : {[currentMap.code]: education_data[currentMap.code]};\n\n  useEffect(() => {\n    if (regionHighlighted.districtName) {\n      if (\n        currentMap.code !== regionHighlighted.stateCode &&\n        !(\n          currentMapMeta.mapType === MAP_TYPES.COUNTRY &&\n          currentMap.view === MAP_TYPES.COUNTRY\n        )\n      ) {\n        const newMapMeta = MAP_META[regionHighlighted.stateCode];\n        if (!newMapMeta) {\n          return;\n        }\n        setCurrentMap({\n          code: regionHighlighted.stateCode,\n          view: MAP_TYPES.COUNTRY,\n          option:\n            currentMap.option === MAP_OPTIONS.PER_MILLION\n              ? MAP_OPTIONS.TOTAL\n              : currentMap.option,\n        });\n      }\n    } else if (isCountryLoaded && currentMapMeta.mapType === MAP_TYPES.STATE) {\n      setCurrentMap({\n        code: 'NZ',\n        view:\n          currentMap.option === MAP_OPTIONS.ZONES\n            ? MAP_TYPES.COUNTRY\n            : MAP_TYPES.DISTRICTS,\n        option: currentMap.option,\n      });\n    }\n  }, [\n    isCountryLoaded,\n    regionHighlighted.stateCode,\n    regionHighlighted.districtName,\n    currentMap.code,\n    currentMap.option,\n    currentMap.view,\n    currentMapMeta.mapType,\n  ]);\n\n  const switchMap = useCallback(\n    (stateCode) => {\n      const newMapMeta = MAP_META[stateCode];\n      if (!newMapMeta) {\n        return;\n      }\n      if (newMapMeta.mapType === MAP_TYPES.STATE) {\n        const districts = education_data[stateCode].districts || {};\n        const topDistrict = Object.keys(districts).sort(\n          (a, b) =>\n            getStatistic(districts[b], 'total', mapStatistic) -\n            getStatistic(districts[a], 'total', mapStatistic)\n        )[0];\n        ReactDOM.unstable_batchedUpdates(() => {\n          setRegionHighlighted({\n            stateCode: stateCode,\n            districtName: topDistrict,\n          });\n          setCurrentMap({\n            code: stateCode,\n            view: MAP_TYPES.COUNTRY,\n            option:\n              currentMap.option === MAP_OPTIONS.PER_MILLION\n                ? MAP_OPTIONS.TOTAL\n                : currentMap.option,\n          });\n        });\n      } else {\n        ReactDOM.unstable_batchedUpdates(() => {\n          setCurrentMap({\n            code: 'NZ',\n            view:\n              currentMap.option === MAP_OPTIONS.HOTSPOTS\n                ? MAP_TYPES.COUNTRY\n                : MAP_TYPES.DISTRICTS,\n            option: currentMap.option,\n          });\n          setRegionHighlighted({\n            stateCode: 'TT',\n            districtName: null,\n          });\n        });\n      }\n    },\n    [education_data, currentMap.option, mapStatistic, setRegionHighlighted]\n  );\n\n  useEffect(() => {\n    switchMap(stateCode);\n  }, [stateCode, switchMap]);\n\n  const panelState = useMemo(() => {\n    const stateCode =\n      currentMap.view === MAP_TYPES.DISTRICTS\n        ? regionHighlighted.stateCode\n        : currentMap.code;\n    const stateData = education_data[stateCode] || {};\n    return produce(stateData, (draft) => {\n      draft.state = DISTRICT_NAMES[stateCode];\n    });\n  }, [education_data, regionHighlighted.stateCode, currentMap.view, currentMap.code]);\n\n  const hoveredRegion = useMemo(() => {\n    const hoveredData =\n      (regionHighlighted.districtName\n        ? education_data[regionHighlighted.stateCode]?.districts?.[\n            regionHighlighted.districtName\n          ]\n        : education_data[regionHighlighted.stateCode]) || {};\n    return produce(hoveredData, (draft) => {\n      draft.name =\n        regionHighlighted.districtName ||\n        DISTRICT_NAMES[regionHighlighted.stateCode];\n      if (!regionHighlighted.districtName)\n        draft.population_millions =\n          DISTRICT_POPULATIONS_MIL[regionHighlighted.stateCode];\n    });\n  }, [education_data, regionHighlighted.stateCode, regionHighlighted.districtName]);\n\n  const handleTabClick = (option) => {\n    switch (option) {\n      case MAP_OPTIONS.TOTAL:\n        setCurrentMap({\n          code: currentMap.code,\n          view:\n            currentMapMeta.mapType === MAP_TYPES.COUNTRY\n              ? MAP_TYPES.DISTRICTS\n              : MAP_TYPES.COUNTRY,\n          option: MAP_OPTIONS.TOTAL,\n        });\n        if (currentMapMeta.mapType === MAP_TYPES.COUNTRY)\n          setRegionHighlighted({\n            stateCode: regionHighlighted.stateCode,\n            districtName: null,\n          });\n        return;\n      case MAP_OPTIONS.PER_MILLION:\n        if (currentMapMeta.mapType === MAP_TYPES.STATE) return;\n        setCurrentMap({\n          code: currentMap.code,\n          view: MAP_TYPES.DISTRICTS,\n          option: MAP_OPTIONS.PER_MILLION,\n        });\n        setRegionHighlighted({\n          stateCode: regionHighlighted.stateCode,\n          districtName: null,\n        });\n        return;\n      case MAP_OPTIONS.HOTSPOTS:\n        setCurrentMap({\n          code: currentMap.code,\n          view: MAP_TYPES.COUNTRY,\n          option: MAP_OPTIONS.HOTSPOTS,\n        });\n        return;\n      case MAP_OPTIONS.ZONES:\n        setCurrentMap({\n          code: currentMap.code,\n          view: MAP_TYPES.COUNTRY,\n          option: MAP_OPTIONS.ZONES,\n        });\n        if (currentMapMeta.mapType === MAP_TYPES.COUNTRY)\n          setRegionHighlighted({\n            stateCode: 'NZ',\n            districtName: null,\n          });\n        return;\n      default:\n        return;\n    }\n  };\n\n  const springs = useSprings(\n    MAP_STATISTICS.length,\n    MAP_STATISTICS.map((statistic) => ({\n      total: getStatistic(panelState, 'total', statistic),\n      delta: getStatistic(panelState, 'delta', statistic),\n      from: {\n        total: getStatistic(panelState, 'total', statistic),\n        delta: getStatistic(panelState, 'delta', statistic),\n      },\n      config: {\n        tension: 500,\n        clamp: true,\n      },\n    }))\n  );\n\n  return (\n    <div\n      className={classnames(\n        'MapExplorer',\n        {stickied: anchor === 'mapexplorer'},\n        {hidden: anchor && anchor !== 'mapexplorer'}\n      )}\n    >\n      {window.innerWidth > 769 && (\n        <div\n          className={classnames('anchor', {stickied: anchor === 'mapexplorer'})}\n          onClick={() => {\n            setAnchor(anchor === 'mapexplorer' ? null : 'mapexplorer');\n          }}\n        >\n          <PinIcon />\n        </div>\n      )}\n\n      <div className=\"header\">\n        <h1>\n          {currentMap.code === 'TT'\n            ? t('NZ')\n            : t(DISTRICT_NAMES[currentMap.code])}{' '}\n          {t('Map')}\n        </h1>\n        <h6>\n          {t('{{action}} over a {{mapType}} for more details', {\n            action: t(window.innerWidth <= 769 ? 'Tap' : 'Hover'),\n            mapType: t(\n              currentMapMeta.mapType === MAP_TYPES.COUNTRY\n                ? 'NZ'\n                : 'Regional District'\n            ),\n          })}\n        </h6>\n      </div>\n\n      <div className=\"map-stats\">\n        {MAP_STATISTICS.map((statistic, index) => (\n          <div\n            key={statistic}\n            className={classnames('stats', statistic, {\n              focused: statistic === mapStatistic,\n            })}\n            onClick={() => setMapStatistic(statistic)}\n          >\n            <h5>{t(capitalize(statistic))}</h5>\n            <div className=\"stats-bottom\">\n              <animated.h1>\n                {springs[index].total.interpolate((total) =>\n                  formatNumber(Math.floor(total))\n                )}\n              </animated.h1>\n              {statistic !== 'tested' && statistic !== 'active' && (\n                <animated.h6>\n                  {springs[index].delta.interpolate((delta) =>\n                    delta > 0 ? `+${formatNumber(Math.floor(delta))}` : '\\u00A0'\n                  )}\n                </animated.h6>\n              )}\n              {statistic === 'tested' && (\n                <h6>\n                  {panelState?.total?.tested &&\n                    t('As of {{date}}', {\n                      date: formatDate(\n                        panelState.meta.tested['last_updated'],\n                        'dd MMM'\n                      ),\n                    })}\n                </h6>\n              )}\n            </div>\n            {statistic === 'tested' && panelState?.total?.tested && (\n              <a href={panelState.meta.tested.source} target=\"_noblank\">\n                <Icon.Link />\n              </a>\n            )}\n          </div>\n        ))}\n      </div>\n\n      <div className=\"meta\">\n        {currentMapMeta.mapType === MAP_TYPES.STATE && (\n          <div\n            className=\"map-button\"\n            onClick={() => history.push(`district/${currentMap.code}`)}\n          >\n            {t('Visit state page')}\n            <Icon.ArrowRightCircle />\n          </div>\n        )}\n\n        {currentMapMeta.mapType !== MAP_TYPES.STATE &&\n          panelState?.meta?.['last_updated'] && (\n            <div className=\"last-update\">\n              <h6>{t('Last updated')}</h6>\n              <h3>\n                {`${formatLastUpdated(panelState.meta['last_updated'])} ${t(\n                  'ago'\n                )}`}\n              </h3>\n            </div>\n          )}\n\n        <h2\n          className={classnames(mapStatistic, {\n            [hoveredRegion?.zone]: currentMap.option === MAP_OPTIONS.ZONES,\n          })}\n        >\n          {t(hoveredRegion.name)}\n          {hoveredRegion.name === UNKNOWN_DISTRICT_KEY &&\n            ` (${t(DISTRICT_NAMES[regionHighlighted.stateCode])})`}\n        </h2>\n\n        {currentMapMeta.mapType === MAP_TYPES.STATE && (\n          <div className=\"map-button\" onClick={() => switchMap('TT')}>\n            {t('Back')}\n          </div>\n        )}\n\n        {currentMap.option !== MAP_OPTIONS.ZONES &&\n          ((currentMap.view === MAP_TYPES.COUNTRY &&\n            regionHighlighted.districtName) ||\n            (currentMap.view === MAP_TYPES.DISTRICTS &&\n              currentMap.option !== MAP_OPTIONS.TOTAL)) && (\n            <h1 className={classnames('district', mapStatistic)}>\n              {formatNumber(\n                getStatistic(\n                  hoveredRegion,\n                  'total',\n                  mapStatistic,\n                  currentMap.option === MAP_OPTIONS.PER_MILLION\n                    ? hoveredRegion.population_millions\n                    : 1\n                )\n              )}\n              <br />\n              <span>\n                {t(mapStatistic)}\n                {currentMap.option === MAP_OPTIONS.PER_MILLION &&\n                  ` ${t('per million')}`}\n              </span>\n            </h1>\n          )}\n      </div>\n\n      <div ref={mapExplorerRef}>\n        {mapStatistic && (\n          <Suspense\n            fallback={\n              <MapVisualizerLoader\n                className=\"map-loader\"\n                {...{\n                  width: mapExplorerRef.current?.clientWidth,\n                  statistic: mapStatistic,\n                }}\n              />\n            }\n          >\n            <MapVisualizer\n              currentMap={currentMap}\n              data={currentMapData}\n              changeMap={switchMap}\n              regionHighlighted={regionHighlighted}\n              setRegionHighlighted={setRegionHighlighted}\n              statistic={mapStatistic}\n              isCountryLoaded={isCountryLoaded}\n            />\n          </Suspense>\n        )}\n      </div>\n\n      <div className=\"tabs-map\">\n        {Object.values(MAP_OPTIONS).map((option) => (\n          <div\n            key={option}\n            className={classnames('tab', {\n              focused: currentMap.option === option,\n            })}\n            onClick={() => handleTabClick(option)}\n          >\n            <h4>\n              {t(option)}\n              {option === MAP_OPTIONS.PER_MILLION && <sup>&dagger;</sup>}\n            </h4>\n          </div>\n        ))}\n      </div>\n\n      <h6 className={classnames('footnote')}>\n        &dagger; {`${t('Based on 2018 Census by NZ Statistics, see ')}`}\n        <a\n          href=\"https://www.stats.govt.nz/2018-census/there-and-back-again-data-visualisation-competition\"\n          target=\"_noblank\"\n          style={{color: '#6c757d'}}\n        >\n          {t('source')}\n        </a>\n      </h6>\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.stateCode, currProps.stateCode)) {\n    return false;\n  } else if (!equal(prevProps.regionHighlighted, currProps.regionHighlighted)) {\n    return false;\n  } else if (!equal(prevProps.mapStatistic, currProps.mapStatistic)) {\n    return false;\n  } else if (!equal(prevProps.anchor, currProps.anchor)) {\n    return false;\n  } else if (\n    !equal(\n      prevProps.education_data?.NZ?.meta?.['last_updated'],\n      currProps.education_data?.NZ?.meta?.['last_updated']\n    )\n  ) {\n    return false;\n  } else if (!equal(prevProps.education_data?.NZ?.total, currProps.education_data?.NZ?.total)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(MapExplorer, isEqual);\n"],"sourceRoot":""}