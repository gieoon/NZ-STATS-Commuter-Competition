{"version":3,"sources":["hooks/useStickySwr.js","components/home.jsx"],"names":["useStickySWR","key","fetcher","swrOptions","useState","options","setOptions","args","useSWR","data","isValidating","error","rest","useUpdateEffect","produce","draftOptions","initialData","MapExplorer","lazy","Home","props","mapStatistic","setMapStatistic","anchor","setAnchor","stateCode","districtName","regionHighlighted","setRegionHighlighted","education_data","DATA_URL_ROOT","revalidateOnMount","refreshInterval","revalidateOnFocus","nzMap","useRef","isVisible","useIsVisible","once","Set","Object","keys","MAP_META","filter","sort","Fragment","Helmet","name","content","ref","fallback"],"mappings":"oPA+BeA,MA1BR,SAAsBC,EAAKC,EAASC,GAAqB,IAAC,IAAD,EAChCC,mBAASD,GADuB,mBACvDE,EADuD,KAC9CC,EAD8C,wBAANC,EAAM,iCAANA,EAAM,wBAGjBC,IAAM,WAAN,GAC3CP,EACAC,EACAG,GAH2C,OAIxCE,IAJEE,EAHuD,EAGvDA,KAAMC,EAHiD,EAGjDA,aAAcC,EAHmC,EAGnCA,MAAUC,EAHyB,+CAkB9D,OARAC,aAAgB,WACdP,EACEQ,YAAQT,GAAS,SAACU,GAChBA,EAAaC,YAAcP,QAG9B,CAACA,IAEG,eACFG,EADL,CAEEF,eACAC,QACAF,U,iBCnBEQ,EAAcC,gBAAK,kBACvB,wDAuGaC,UAlGf,SAAcC,GAAQ,IAAD,EAEuBhB,mBAAS,UAFhC,mBAEViB,EAFU,KAEIC,EAFJ,OAIWlB,mBAAS,MAJpB,mBAIVmB,EAJU,KAIFC,EAJE,OAMiCpB,mBAAS,CACvDqB,UAAW,KACXC,aAAc,OARD,mBAMVC,EANU,KAMSC,EANT,KAqBJC,GAVa7B,EACtB8B,iCACA5B,IACA,CACI6B,mBAAmB,EACnBC,gBAAiB,IACjBC,mBAAmB,IANpBxB,KAUwBT,EAE3B,0DACAE,IACA,CACI6B,mBAAmB,EACnBC,gBAAiB,IACjBC,mBAAmB,IAPpBxB,MAWDyB,EAAQC,mBACRC,EAAYC,uBAAaH,EAAO,CAACI,MAAM,IAiC7C,MA/BgB,CACZ,MADY,mBAET,YACE,IAAIC,IAAJ,sBACEC,OAAOC,KAAKC,KAAUC,QAAO,SAAClB,GAAD,MAA6B,OAAdA,MAD9C,YAEEe,OAAOC,KAAKZ,GAAkB,IAAIc,QAAO,SAAClB,GAAD,MAA6B,OAAdA,SAE7DmB,SAyBF,kBAAC,IAAMC,SAAP,KACI,kBAACC,EAAA,EAAD,KACI,4EACA,0BACIC,KAAK,QACLC,QAAQ,6DAGhB,yBAAKC,IAAKf,GAGLE,GACG,kBAAC,IAAMS,SAAP,KACChB,GACG,kBAAC,WAAD,CAAUqB,SAAU,+BACpB,kBAACjC,EAAD,eACIQ,UAAU,MACN,CAACI,kBACD,CAACR,eAAcC,mBACf,CAACK,oBAAmBC,wBACpB,CAACL,SAAQC","file":"static/js/Home.7eb0a163.chunk.js","sourcesContent":["import produce from 'immer';\nimport {useState} from 'react';\nimport {useUpdateEffect} from 'react-use';\nimport useSWR from 'swr';\n\nexport function useStickySWR(key, fetcher, swrOptions, ...args) {\n  const [options, setOptions] = useState(swrOptions);\n\n  const {data, isValidating, error, ...rest} = useSWR(\n    key,\n    fetcher,\n    options,\n    ...args\n  );\n\n  useUpdateEffect(() => {\n    setOptions(\n      produce(options, (draftOptions) => {\n        draftOptions.initialData = data;\n      })\n    );\n  }, [data]);\n\n  return {\n    ...rest,\n    isValidating,\n    error,\n    data,\n  };\n}\n\nexport default useStickySWR;\n","import React, {lazy, useState, useRef, Suspense} from 'react';\nimport {MAP_META} from '../constants';\n// import axios from 'axios';\nimport {fetcher} from '../utils/commonFunctions';\nimport useStickySWR from '../hooks/useStickySwr';\nimport {useIsVisible} from 'react-is-visible';\nimport {Helmet} from 'react-helmet';\n\nconst MapExplorer = lazy(() =>\n  import('./mapExplorer' /* webpackChunkName: \"MapExplorer\" */)\n);\n\nconst DATA_URL_ROOT = \"http://localhost:5000\";\n\nfunction Home(props) {\n\n    const [mapStatistic, setMapStatistic] = useState('active');\n    \n    const [anchor, setAnchor] = useState(null);\n\n    const [regionHighlighted, setRegionHighlighted] = useState({\n        stateCode: 'NZ',\n        districtName: null,\n    });\n\n    const {data: work_data} = useStickySWR(\n        DATA_URL_ROOT + '/work_csv',\n        fetcher,\n        {\n            revalidateOnMount: true,\n            refreshInterval: 100000,\n            revalidateOnFocus: false,\n        }\n    );\n\n    const {data: education_data} = useStickySWR(\n        // DATA_URL_ROOT + '/education_csv',\n        'https://api.covid19india.org/v3/min/timeseries.min.json',\n        fetcher,\n        {\n            revalidateOnMount: true,\n            refreshInterval: 100000,\n            revalidateOnFocus: false,\n        }\n    );\n    \n    const nzMap = useRef();\n    const isVisible = useIsVisible(nzMap, {once: true});\n\n    const stateCodes = [\n        'NZ',\n        ...[\n          ...new Set([\n            ...Object.keys(MAP_META).filter((stateCode) => stateCode !== 'NZ'),\n            ...Object.keys(education_data || {}).filter((stateCode) => stateCode !== 'NZ'),\n          ]),\n        ].sort(),\n    ];\n\n    const getCSVFromText = (allText) => {\n        var allTextLines = allText.split(/\\r\\n|\\n/);\n        var headers = allTextLines[0].split(',');\n        var lines = [];\n    \n        for (var i=1; i<allTextLines.length; i++) {\n            var data = allTextLines[i].split(',');\n            if (data.length == headers.length) {\n    \n                var row = {};\n                // Need to skip the first one, but will do this on the serverside after sanitizing data\n                for (var j=0; j<headers.length; j++) {\n                    row[headers[j]] = data[j];\n                }\n                lines.push(row);\n            }\n        }\n        return lines;\n    }\n\n    //TODO render work & education data together.\n    return(\n        <React.Fragment>\n            <Helmet>\n                <title>Visualization of Commuter Data - NZ Stats</title>\n                <meta\n                    name=\"title\"\n                    content=\"Visualization of Commuter Data - New Zealand Statistics\"\n                />\n            </Helmet>\n            <div ref={nzMap}>\n                {/* {console.log(work_data)} */}\n                {/* {console.log(education_data)} */}\n                {isVisible && (\n                    <React.Fragment>\n                    {education_data && (\n                        <Suspense fallback={<div />}>\n                        <MapExplorer\n                            stateCode=\"NZ\"\n                            {...{education_data}}\n                            {...{mapStatistic, setMapStatistic}}\n                            {...{regionHighlighted, setRegionHighlighted}}\n                            {...{anchor, setAnchor}}\n                        />\n                        </Suspense>\n                    )}\n                    </React.Fragment>\n                )}\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default Home;\n\n    // // WORK = 50870 rows\n        // // EDUCATION = 22430 rows\n        // axios.get(DATA_URL_ROOT + '/work_csv')\n        //     .then((res) => {\n        //         const csv = this.getCSVFromText(res.data);\n        //         // console.log('WORK DATA: ', csv);\n        //         console.log('WORK DATA: ', csv.length);\n        //     });\n\n        //     axios.get(DATA_URL_ROOT + '/education_csv')\n        //     .then((res) => {\n        //         const csv = this.getCSVFromText(res.data);\n        //         // console.log('EDUCATION DATA: ', csv);\n        //         console.log('EDUCATION DATA: ', csv.length);\n        //         console.log(csv[1]);\n        //     });\n    // }"],"sourceRoot":""}